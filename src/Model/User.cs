/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
        public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">__________.</param>
        /// <param name="firstName">________.</param>
        /// <param name="lastName">_________.</param>
        /// <param name="email">_________.</param>
        /// <param name="phone">_________.</param>
        /// <param name="signature">_________.</param>
        /// <param name="avatar">_________.</param>
        /// <param name="acceptedTermsVersion">_________.</param>
        /// <param name="oauthUserId">_________.</param>
        /// <param name="oauthProviderId">_________.</param>
        public User(string id = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string phone = default(string), string signature = default(string), string avatar = default(string), string acceptedTermsVersion = default(string), string oauthUserId = default(string), string oauthProviderId = default(string))
        {
            this.Id = id;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.Phone = phone;
            this.Signature = signature;
            this.Avatar = avatar;
            this.AcceptedTermsVersion = acceptedTermsVersion;
            this.OauthUserId = oauthUserId;
            this.OauthProviderId = oauthProviderId;
        }
        
        /// <summary>
        /// __________
        /// </summary>
        /// <value>__________</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="accepted_terms_version", EmitDefaultValue=false)]
        public string AcceptedTermsVersion { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="oauth_user_id", EmitDefaultValue=false)]
        public string OauthUserId { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="oauth_provider_id", EmitDefaultValue=false)]
        public string OauthProviderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  AcceptedTermsVersion: ").Append(AcceptedTermsVersion).Append("\n");
            sb.Append("  OauthUserId: ").Append(OauthUserId).Append("\n");
            sb.Append("  OauthProviderId: ").Append(OauthProviderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.AcceptedTermsVersion == input.AcceptedTermsVersion ||
                    (this.AcceptedTermsVersion != null &&
                    this.AcceptedTermsVersion.Equals(input.AcceptedTermsVersion))
                ) && 
                (
                    this.OauthUserId == input.OauthUserId ||
                    (this.OauthUserId != null &&
                    this.OauthUserId.Equals(input.OauthUserId))
                ) && 
                (
                    this.OauthProviderId == input.OauthProviderId ||
                    (this.OauthProviderId != null &&
                    this.OauthProviderId.Equals(input.OauthProviderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.AcceptedTermsVersion != null)
                    hashCode = hashCode * 59 + this.AcceptedTermsVersion.GetHashCode();
                if (this.OauthUserId != null)
                    hashCode = hashCode * 59 + this.OauthUserId.GetHashCode();
                if (this.OauthProviderId != null)
                    hashCode = hashCode * 59 + this.OauthProviderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
