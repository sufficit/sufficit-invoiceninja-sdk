/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// CompanyLedger
    /// </summary>
    [DataContract]
        public partial class CompanyLedger :  IEquatable<CompanyLedger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyLedger" /> class.
        /// </summary>
        /// <param name="entityId">This field will reference one of the following entity hashed ID payment_id, invoice_id or credit_id.</param>
        /// <param name="notes">The notes which reference this entry of the ledger.</param>
        /// <param name="balance">The client balance.</param>
        /// <param name="adjustment">The amount the client balance is adjusted by.</param>
        /// <param name="updatedAt">Timestamp.</param>
        /// <param name="createdAt">Timestamp.</param>
        public CompanyLedger(string entityId = default(string), string notes = default(string), float? balance = default(float?), float? adjustment = default(float?), decimal? updatedAt = default(decimal?), decimal? createdAt = default(decimal?))
        {
            this.EntityId = entityId;
            this.Notes = notes;
            this.Balance = balance;
            this.Adjustment = adjustment;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
        }
        
        /// <summary>
        /// This field will reference one of the following entity hashed ID payment_id, invoice_id or credit_id
        /// </summary>
        /// <value>This field will reference one of the following entity hashed ID payment_id, invoice_id or credit_id</value>
        [DataMember(Name="entity_id", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The notes which reference this entry of the ledger
        /// </summary>
        /// <value>The notes which reference this entry of the ledger</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// The client balance
        /// </summary>
        /// <value>The client balance</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public float? Balance { get; set; }

        /// <summary>
        /// The amount the client balance is adjusted by
        /// </summary>
        /// <value>The amount the client balance is adjusted by</value>
        [DataMember(Name="adjustment", EmitDefaultValue=false)]
        public float? Adjustment { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public decimal? UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public decimal? CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyLedger {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Adjustment: ").Append(Adjustment).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyLedger);
        }

        /// <summary>
        /// Returns true if CompanyLedger instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyLedger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyLedger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Adjustment == input.Adjustment ||
                    (this.Adjustment != null &&
                    this.Adjustment.Equals(input.Adjustment))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Adjustment != null)
                    hashCode = hashCode * 59 + this.Adjustment.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
