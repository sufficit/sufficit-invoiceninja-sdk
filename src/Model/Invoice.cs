/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// Invoice
    /// </summary>
    [DataContract]
        public partial class Invoice :  IEquatable<Invoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="id">_________.</param>
        /// <param name="userId">__________.</param>
        /// <param name="assignedUserId">__________.</param>
        /// <param name="companyId">________.</param>
        /// <param name="clientId">________.</param>
        /// <param name="statusId">________.</param>
        /// <param name="number">The invoice number - is a unique alpha numeric number per invoice per company.</param>
        /// <param name="poNumber">________.</param>
        /// <param name="terms">________.</param>
        /// <param name="publicNotes">________.</param>
        /// <param name="privateNotes">________.</param>
        /// <param name="footer">________.</param>
        /// <param name="customValue1">________.</param>
        /// <param name="customValue2">________.</param>
        /// <param name="customValue3">________.</param>
        /// <param name="customValue4">________.</param>
        /// <param name="taxName1">________.</param>
        /// <param name="taxName2">________.</param>
        /// <param name="taxRate1">_________.</param>
        /// <param name="taxRate2">_________.</param>
        /// <param name="taxName3">________.</param>
        /// <param name="taxRate3">_________.</param>
        /// <param name="totalTaxes">The total taxes for the invoice.</param>
        /// <param name="lineItems">_________.</param>
        /// <param name="amount">_________.</param>
        /// <param name="balance">_________.</param>
        /// <param name="paidToDate">_________.</param>
        /// <param name="discount">_________.</param>
        /// <param name="partial">_________.</param>
        /// <param name="isAmountDiscount">_________.</param>
        /// <param name="isDeleted">_________.</param>
        /// <param name="usesInclusiveTaxes">Defines the type of taxes used as either inclusive or exclusive.</param>
        /// <param name="date">The Invoice Date.</param>
        /// <param name="lastSentDate">The last date the invoice was sent out.</param>
        /// <param name="nextSendDate">The Next date for a reminder to be sent.</param>
        /// <param name="partialDueDate">_________.</param>
        /// <param name="dueDate">_________.</param>
        /// <param name="settings">settings.</param>
        /// <param name="lastViewed">Timestamp.</param>
        /// <param name="updatedAt">Timestamp.</param>
        /// <param name="archivedAt">Timestamp.</param>
        /// <param name="customSurcharge1">First Custom Surcharge.</param>
        /// <param name="customSurcharge2">Second Custom Surcharge.</param>
        /// <param name="customSurcharge3">Third Custom Surcharge.</param>
        /// <param name="customSurcharge4">Fourth Custom Surcharge.</param>
        /// <param name="customSurchargeTax1">Toggles charging taxes on custom surcharge amounts.</param>
        /// <param name="customSurchargeTax2">Toggles charging taxes on custom surcharge amounts.</param>
        /// <param name="customSurchargeTax3">Toggles charging taxes on custom surcharge amounts.</param>
        /// <param name="customSurchargeTax4">Toggles charging taxes on custom surcharge amounts.</param>
        public Invoice(string id = default(string), string userId = default(string), string assignedUserId = default(string), string companyId = default(string), string clientId = default(string), string statusId = default(string), string number = default(string), string poNumber = default(string), string terms = default(string), string publicNotes = default(string), string privateNotes = default(string), string footer = default(string), string customValue1 = default(string), string customValue2 = default(string), string customValue3 = default(string), string customValue4 = default(string), string taxName1 = default(string), string taxName2 = default(string), float? taxRate1 = default(float?), float? taxRate2 = default(float?), string taxName3 = default(string), float? taxRate3 = default(float?), float? totalTaxes = default(float?), Object lineItems = default(Object), float? amount = default(float?), float? balance = default(float?), float? paidToDate = default(float?), float? discount = default(float?), float? partial = default(float?), bool? isAmountDiscount = default(bool?), bool? isDeleted = default(bool?), bool? usesInclusiveTaxes = default(bool?), DateTime? date = default(DateTime?), DateTime? lastSentDate = default(DateTime?), DateTime? nextSendDate = default(DateTime?), DateTime? partialDueDate = default(DateTime?), DateTime? dueDate = default(DateTime?), CompanySettings settings = default(CompanySettings), decimal? lastViewed = default(decimal?), decimal? updatedAt = default(decimal?), decimal? archivedAt = default(decimal?), float? customSurcharge1 = default(float?), float? customSurcharge2 = default(float?), float? customSurcharge3 = default(float?), float? customSurcharge4 = default(float?), bool? customSurchargeTax1 = default(bool?), bool? customSurchargeTax2 = default(bool?), bool? customSurchargeTax3 = default(bool?), bool? customSurchargeTax4 = default(bool?))
        {
            this.Id = id;
            this.UserId = userId;
            this.AssignedUserId = assignedUserId;
            this.CompanyId = companyId;
            this.ClientId = clientId;
            this.StatusId = statusId;
            this.Number = number;
            this.PoNumber = poNumber;
            this.Terms = terms;
            this.PublicNotes = publicNotes;
            this.PrivateNotes = privateNotes;
            this.Footer = footer;
            this.CustomValue1 = customValue1;
            this.CustomValue2 = customValue2;
            this.CustomValue3 = customValue3;
            this.CustomValue4 = customValue4;
            this.TaxName1 = taxName1;
            this.TaxName2 = taxName2;
            this.TaxRate1 = taxRate1;
            this.TaxRate2 = taxRate2;
            this.TaxName3 = taxName3;
            this.TaxRate3 = taxRate3;
            this.TotalTaxes = totalTaxes;
            this.LineItems = lineItems;
            this.Amount = amount;
            this.Balance = balance;
            this.PaidToDate = paidToDate;
            this.Discount = discount;
            this.Partial = partial;
            this.IsAmountDiscount = isAmountDiscount;
            this.IsDeleted = isDeleted;
            this.UsesInclusiveTaxes = usesInclusiveTaxes;
            this.Date = date;
            this.LastSentDate = lastSentDate;
            this.NextSendDate = nextSendDate;
            this.PartialDueDate = partialDueDate;
            this.DueDate = dueDate;
            this.Settings = settings;
            this.LastViewed = lastViewed;
            this.UpdatedAt = updatedAt;
            this.ArchivedAt = archivedAt;
            this.CustomSurcharge1 = customSurcharge1;
            this.CustomSurcharge2 = customSurcharge2;
            this.CustomSurcharge3 = customSurcharge3;
            this.CustomSurcharge4 = customSurcharge4;
            this.CustomSurchargeTax1 = customSurchargeTax1;
            this.CustomSurchargeTax2 = customSurchargeTax2;
            this.CustomSurchargeTax3 = customSurchargeTax3;
            this.CustomSurchargeTax4 = customSurchargeTax4;
        }
        
        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// __________
        /// </summary>
        /// <value>__________</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// __________
        /// </summary>
        /// <value>__________</value>
        [DataMember(Name="assigned_user_id", EmitDefaultValue=false)]
        public string AssignedUserId { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="company_id", EmitDefaultValue=false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="status_id", EmitDefaultValue=false)]
        public string StatusId { get; set; }

        /// <summary>
        /// The invoice number - is a unique alpha numeric number per invoice per company
        /// </summary>
        /// <value>The invoice number - is a unique alpha numeric number per invoice per company</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="po_number", EmitDefaultValue=false)]
        public string PoNumber { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="public_notes", EmitDefaultValue=false)]
        public string PublicNotes { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="private_notes", EmitDefaultValue=false)]
        public string PrivateNotes { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public string Footer { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="custom_value1", EmitDefaultValue=false)]
        public string CustomValue1 { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="custom_value2", EmitDefaultValue=false)]
        public string CustomValue2 { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="custom_value3", EmitDefaultValue=false)]
        public string CustomValue3 { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="custom_value4", EmitDefaultValue=false)]
        public string CustomValue4 { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="tax_name1", EmitDefaultValue=false)]
        public string TaxName1 { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="tax_name2", EmitDefaultValue=false)]
        public string TaxName2 { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="tax_rate1", EmitDefaultValue=false)]
        public float? TaxRate1 { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="tax_rate2", EmitDefaultValue=false)]
        public float? TaxRate2 { get; set; }

        /// <summary>
        /// ________
        /// </summary>
        /// <value>________</value>
        [DataMember(Name="tax_name3", EmitDefaultValue=false)]
        public string TaxName3 { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="tax_rate3", EmitDefaultValue=false)]
        public float? TaxRate3 { get; set; }

        /// <summary>
        /// The total taxes for the invoice
        /// </summary>
        /// <value>The total taxes for the invoice</value>
        [DataMember(Name="total_taxes", EmitDefaultValue=false)]
        public float? TotalTaxes { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="line_items", EmitDefaultValue=false)]
        public Object LineItems { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public float? Amount { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public float? Balance { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="paid_to_date", EmitDefaultValue=false)]
        public float? PaidToDate { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public float? Discount { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="partial", EmitDefaultValue=false)]
        public float? Partial { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="is_amount_discount", EmitDefaultValue=false)]
        public bool? IsAmountDiscount { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="is_deleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Defines the type of taxes used as either inclusive or exclusive
        /// </summary>
        /// <value>Defines the type of taxes used as either inclusive or exclusive</value>
        [DataMember(Name="uses_inclusive_taxes", EmitDefaultValue=false)]
        public bool? UsesInclusiveTaxes { get; set; }

        /// <summary>
        /// The Invoice Date
        /// </summary>
        /// <value>The Invoice Date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The last date the invoice was sent out
        /// </summary>
        /// <value>The last date the invoice was sent out</value>
        [DataMember(Name="last_sent_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastSentDate { get; set; }

        /// <summary>
        /// The Next date for a reminder to be sent
        /// </summary>
        /// <value>The Next date for a reminder to be sent</value>
        [DataMember(Name="next_send_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? NextSendDate { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="partial_due_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PartialDueDate { get; set; }

        /// <summary>
        /// _________
        /// </summary>
        /// <value>_________</value>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public CompanySettings Settings { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="last_viewed", EmitDefaultValue=false)]
        public decimal? LastViewed { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public decimal? UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="archived_at", EmitDefaultValue=false)]
        public decimal? ArchivedAt { get; set; }

        /// <summary>
        /// First Custom Surcharge
        /// </summary>
        /// <value>First Custom Surcharge</value>
        [DataMember(Name="custom_surcharge1", EmitDefaultValue=false)]
        public float? CustomSurcharge1 { get; set; }

        /// <summary>
        /// Second Custom Surcharge
        /// </summary>
        /// <value>Second Custom Surcharge</value>
        [DataMember(Name="custom_surcharge2", EmitDefaultValue=false)]
        public float? CustomSurcharge2 { get; set; }

        /// <summary>
        /// Third Custom Surcharge
        /// </summary>
        /// <value>Third Custom Surcharge</value>
        [DataMember(Name="custom_surcharge3", EmitDefaultValue=false)]
        public float? CustomSurcharge3 { get; set; }

        /// <summary>
        /// Fourth Custom Surcharge
        /// </summary>
        /// <value>Fourth Custom Surcharge</value>
        [DataMember(Name="custom_surcharge4", EmitDefaultValue=false)]
        public float? CustomSurcharge4 { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_tax1", EmitDefaultValue=false)]
        public bool? CustomSurchargeTax1 { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_tax2", EmitDefaultValue=false)]
        public bool? CustomSurchargeTax2 { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_tax3", EmitDefaultValue=false)]
        public bool? CustomSurchargeTax3 { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_tax4", EmitDefaultValue=false)]
        public bool? CustomSurchargeTax4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AssignedUserId: ").Append(AssignedUserId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  PublicNotes: ").Append(PublicNotes).Append("\n");
            sb.Append("  PrivateNotes: ").Append(PrivateNotes).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  CustomValue1: ").Append(CustomValue1).Append("\n");
            sb.Append("  CustomValue2: ").Append(CustomValue2).Append("\n");
            sb.Append("  CustomValue3: ").Append(CustomValue3).Append("\n");
            sb.Append("  CustomValue4: ").Append(CustomValue4).Append("\n");
            sb.Append("  TaxName1: ").Append(TaxName1).Append("\n");
            sb.Append("  TaxName2: ").Append(TaxName2).Append("\n");
            sb.Append("  TaxRate1: ").Append(TaxRate1).Append("\n");
            sb.Append("  TaxRate2: ").Append(TaxRate2).Append("\n");
            sb.Append("  TaxName3: ").Append(TaxName3).Append("\n");
            sb.Append("  TaxRate3: ").Append(TaxRate3).Append("\n");
            sb.Append("  TotalTaxes: ").Append(TotalTaxes).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  PaidToDate: ").Append(PaidToDate).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Partial: ").Append(Partial).Append("\n");
            sb.Append("  IsAmountDiscount: ").Append(IsAmountDiscount).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  UsesInclusiveTaxes: ").Append(UsesInclusiveTaxes).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  LastSentDate: ").Append(LastSentDate).Append("\n");
            sb.Append("  NextSendDate: ").Append(NextSendDate).Append("\n");
            sb.Append("  PartialDueDate: ").Append(PartialDueDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  LastViewed: ").Append(LastViewed).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ArchivedAt: ").Append(ArchivedAt).Append("\n");
            sb.Append("  CustomSurcharge1: ").Append(CustomSurcharge1).Append("\n");
            sb.Append("  CustomSurcharge2: ").Append(CustomSurcharge2).Append("\n");
            sb.Append("  CustomSurcharge3: ").Append(CustomSurcharge3).Append("\n");
            sb.Append("  CustomSurcharge4: ").Append(CustomSurcharge4).Append("\n");
            sb.Append("  CustomSurchargeTax1: ").Append(CustomSurchargeTax1).Append("\n");
            sb.Append("  CustomSurchargeTax2: ").Append(CustomSurchargeTax2).Append("\n");
            sb.Append("  CustomSurchargeTax3: ").Append(CustomSurchargeTax3).Append("\n");
            sb.Append("  CustomSurchargeTax4: ").Append(CustomSurchargeTax4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="input">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AssignedUserId == input.AssignedUserId ||
                    (this.AssignedUserId != null &&
                    this.AssignedUserId.Equals(input.AssignedUserId))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.PoNumber == input.PoNumber ||
                    (this.PoNumber != null &&
                    this.PoNumber.Equals(input.PoNumber))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.PublicNotes == input.PublicNotes ||
                    (this.PublicNotes != null &&
                    this.PublicNotes.Equals(input.PublicNotes))
                ) && 
                (
                    this.PrivateNotes == input.PrivateNotes ||
                    (this.PrivateNotes != null &&
                    this.PrivateNotes.Equals(input.PrivateNotes))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.CustomValue1 == input.CustomValue1 ||
                    (this.CustomValue1 != null &&
                    this.CustomValue1.Equals(input.CustomValue1))
                ) && 
                (
                    this.CustomValue2 == input.CustomValue2 ||
                    (this.CustomValue2 != null &&
                    this.CustomValue2.Equals(input.CustomValue2))
                ) && 
                (
                    this.CustomValue3 == input.CustomValue3 ||
                    (this.CustomValue3 != null &&
                    this.CustomValue3.Equals(input.CustomValue3))
                ) && 
                (
                    this.CustomValue4 == input.CustomValue4 ||
                    (this.CustomValue4 != null &&
                    this.CustomValue4.Equals(input.CustomValue4))
                ) && 
                (
                    this.TaxName1 == input.TaxName1 ||
                    (this.TaxName1 != null &&
                    this.TaxName1.Equals(input.TaxName1))
                ) && 
                (
                    this.TaxName2 == input.TaxName2 ||
                    (this.TaxName2 != null &&
                    this.TaxName2.Equals(input.TaxName2))
                ) && 
                (
                    this.TaxRate1 == input.TaxRate1 ||
                    (this.TaxRate1 != null &&
                    this.TaxRate1.Equals(input.TaxRate1))
                ) && 
                (
                    this.TaxRate2 == input.TaxRate2 ||
                    (this.TaxRate2 != null &&
                    this.TaxRate2.Equals(input.TaxRate2))
                ) && 
                (
                    this.TaxName3 == input.TaxName3 ||
                    (this.TaxName3 != null &&
                    this.TaxName3.Equals(input.TaxName3))
                ) && 
                (
                    this.TaxRate3 == input.TaxRate3 ||
                    (this.TaxRate3 != null &&
                    this.TaxRate3.Equals(input.TaxRate3))
                ) && 
                (
                    this.TotalTaxes == input.TotalTaxes ||
                    (this.TotalTaxes != null &&
                    this.TotalTaxes.Equals(input.TotalTaxes))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    (this.LineItems != null &&
                    this.LineItems.Equals(input.LineItems))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.PaidToDate == input.PaidToDate ||
                    (this.PaidToDate != null &&
                    this.PaidToDate.Equals(input.PaidToDate))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.Partial == input.Partial ||
                    (this.Partial != null &&
                    this.Partial.Equals(input.Partial))
                ) && 
                (
                    this.IsAmountDiscount == input.IsAmountDiscount ||
                    (this.IsAmountDiscount != null &&
                    this.IsAmountDiscount.Equals(input.IsAmountDiscount))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.UsesInclusiveTaxes == input.UsesInclusiveTaxes ||
                    (this.UsesInclusiveTaxes != null &&
                    this.UsesInclusiveTaxes.Equals(input.UsesInclusiveTaxes))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.LastSentDate == input.LastSentDate ||
                    (this.LastSentDate != null &&
                    this.LastSentDate.Equals(input.LastSentDate))
                ) && 
                (
                    this.NextSendDate == input.NextSendDate ||
                    (this.NextSendDate != null &&
                    this.NextSendDate.Equals(input.NextSendDate))
                ) && 
                (
                    this.PartialDueDate == input.PartialDueDate ||
                    (this.PartialDueDate != null &&
                    this.PartialDueDate.Equals(input.PartialDueDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.LastViewed == input.LastViewed ||
                    (this.LastViewed != null &&
                    this.LastViewed.Equals(input.LastViewed))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ArchivedAt == input.ArchivedAt ||
                    (this.ArchivedAt != null &&
                    this.ArchivedAt.Equals(input.ArchivedAt))
                ) && 
                (
                    this.CustomSurcharge1 == input.CustomSurcharge1 ||
                    (this.CustomSurcharge1 != null &&
                    this.CustomSurcharge1.Equals(input.CustomSurcharge1))
                ) && 
                (
                    this.CustomSurcharge2 == input.CustomSurcharge2 ||
                    (this.CustomSurcharge2 != null &&
                    this.CustomSurcharge2.Equals(input.CustomSurcharge2))
                ) && 
                (
                    this.CustomSurcharge3 == input.CustomSurcharge3 ||
                    (this.CustomSurcharge3 != null &&
                    this.CustomSurcharge3.Equals(input.CustomSurcharge3))
                ) && 
                (
                    this.CustomSurcharge4 == input.CustomSurcharge4 ||
                    (this.CustomSurcharge4 != null &&
                    this.CustomSurcharge4.Equals(input.CustomSurcharge4))
                ) && 
                (
                    this.CustomSurchargeTax1 == input.CustomSurchargeTax1 ||
                    (this.CustomSurchargeTax1 != null &&
                    this.CustomSurchargeTax1.Equals(input.CustomSurchargeTax1))
                ) && 
                (
                    this.CustomSurchargeTax2 == input.CustomSurchargeTax2 ||
                    (this.CustomSurchargeTax2 != null &&
                    this.CustomSurchargeTax2.Equals(input.CustomSurchargeTax2))
                ) && 
                (
                    this.CustomSurchargeTax3 == input.CustomSurchargeTax3 ||
                    (this.CustomSurchargeTax3 != null &&
                    this.CustomSurchargeTax3.Equals(input.CustomSurchargeTax3))
                ) && 
                (
                    this.CustomSurchargeTax4 == input.CustomSurchargeTax4 ||
                    (this.CustomSurchargeTax4 != null &&
                    this.CustomSurchargeTax4.Equals(input.CustomSurchargeTax4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AssignedUserId != null)
                    hashCode = hashCode * 59 + this.AssignedUserId.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.StatusId != null)
                    hashCode = hashCode * 59 + this.StatusId.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.PoNumber != null)
                    hashCode = hashCode * 59 + this.PoNumber.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.PublicNotes != null)
                    hashCode = hashCode * 59 + this.PublicNotes.GetHashCode();
                if (this.PrivateNotes != null)
                    hashCode = hashCode * 59 + this.PrivateNotes.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.CustomValue1 != null)
                    hashCode = hashCode * 59 + this.CustomValue1.GetHashCode();
                if (this.CustomValue2 != null)
                    hashCode = hashCode * 59 + this.CustomValue2.GetHashCode();
                if (this.CustomValue3 != null)
                    hashCode = hashCode * 59 + this.CustomValue3.GetHashCode();
                if (this.CustomValue4 != null)
                    hashCode = hashCode * 59 + this.CustomValue4.GetHashCode();
                if (this.TaxName1 != null)
                    hashCode = hashCode * 59 + this.TaxName1.GetHashCode();
                if (this.TaxName2 != null)
                    hashCode = hashCode * 59 + this.TaxName2.GetHashCode();
                if (this.TaxRate1 != null)
                    hashCode = hashCode * 59 + this.TaxRate1.GetHashCode();
                if (this.TaxRate2 != null)
                    hashCode = hashCode * 59 + this.TaxRate2.GetHashCode();
                if (this.TaxName3 != null)
                    hashCode = hashCode * 59 + this.TaxName3.GetHashCode();
                if (this.TaxRate3 != null)
                    hashCode = hashCode * 59 + this.TaxRate3.GetHashCode();
                if (this.TotalTaxes != null)
                    hashCode = hashCode * 59 + this.TotalTaxes.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.PaidToDate != null)
                    hashCode = hashCode * 59 + this.PaidToDate.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.Partial != null)
                    hashCode = hashCode * 59 + this.Partial.GetHashCode();
                if (this.IsAmountDiscount != null)
                    hashCode = hashCode * 59 + this.IsAmountDiscount.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.UsesInclusiveTaxes != null)
                    hashCode = hashCode * 59 + this.UsesInclusiveTaxes.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.LastSentDate != null)
                    hashCode = hashCode * 59 + this.LastSentDate.GetHashCode();
                if (this.NextSendDate != null)
                    hashCode = hashCode * 59 + this.NextSendDate.GetHashCode();
                if (this.PartialDueDate != null)
                    hashCode = hashCode * 59 + this.PartialDueDate.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.LastViewed != null)
                    hashCode = hashCode * 59 + this.LastViewed.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.ArchivedAt != null)
                    hashCode = hashCode * 59 + this.ArchivedAt.GetHashCode();
                if (this.CustomSurcharge1 != null)
                    hashCode = hashCode * 59 + this.CustomSurcharge1.GetHashCode();
                if (this.CustomSurcharge2 != null)
                    hashCode = hashCode * 59 + this.CustomSurcharge2.GetHashCode();
                if (this.CustomSurcharge3 != null)
                    hashCode = hashCode * 59 + this.CustomSurcharge3.GetHashCode();
                if (this.CustomSurcharge4 != null)
                    hashCode = hashCode * 59 + this.CustomSurcharge4.GetHashCode();
                if (this.CustomSurchargeTax1 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTax1.GetHashCode();
                if (this.CustomSurchargeTax2 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTax2.GetHashCode();
                if (this.CustomSurchargeTax3 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTax3.GetHashCode();
                if (this.CustomSurchargeTax4 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTax4.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
