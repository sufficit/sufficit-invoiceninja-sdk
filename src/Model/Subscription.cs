/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract]
        public partial class Subscription :  IEquatable<Subscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="id">______.</param>
        /// <param name="userId">______.</param>
        /// <param name="productId">______.</param>
        /// <param name="companyId">______.</param>
        /// <param name="recurringInvoiceId">______.</param>
        /// <param name="isRecurring">______.</param>
        /// <param name="frequencyId">integer const representation of the frequency.</param>
        /// <param name="autoBill">enum setting.</param>
        /// <param name="promoCode">______.</param>
        /// <param name="promoDiscount">______.</param>
        /// <param name="isAmountDiscount">______.</param>
        /// <param name="allowCancellation">______.</param>
        /// <param name="perSeatEnabled">______.</param>
        /// <param name="currencyId">______.</param>
        /// <param name="maxSeatsLimit">______.</param>
        /// <param name="trialEnabled">______.</param>
        /// <param name="trialDuration">______.</param>
        /// <param name="allowQueryOverrides">______.</param>
        /// <param name="allowPlanChanges">______.</param>
        /// <param name="refundPeriod">______.</param>
        /// <param name="webhookConfiguration">______.</param>
        /// <param name="isDeleted">______.</param>
        /// <param name="archivedAt">Timestamp.</param>
        /// <param name="createdAt">Timestamp.</param>
        /// <param name="updatedAt">Timestamp.</param>
        public Subscription(string id = default(string), string userId = default(string), string productId = default(string), string companyId = default(string), string recurringInvoiceId = default(string), bool? isRecurring = default(bool?), string frequencyId = default(string), string autoBill = default(string), string promoCode = default(string), decimal? promoDiscount = default(decimal?), bool? isAmountDiscount = default(bool?), bool? allowCancellation = default(bool?), bool? perSeatEnabled = default(bool?), int? currencyId = default(int?), int? maxSeatsLimit = default(int?), bool? trialEnabled = default(bool?), int? trialDuration = default(int?), bool? allowQueryOverrides = default(bool?), bool? allowPlanChanges = default(bool?), int? refundPeriod = default(int?), string webhookConfiguration = default(string), bool? isDeleted = default(bool?), decimal? archivedAt = default(decimal?), decimal? createdAt = default(decimal?), decimal? updatedAt = default(decimal?))
        {
            this.Id = id;
            this.UserId = userId;
            this.ProductId = productId;
            this.CompanyId = companyId;
            this.RecurringInvoiceId = recurringInvoiceId;
            this.IsRecurring = isRecurring;
            this.FrequencyId = frequencyId;
            this.AutoBill = autoBill;
            this.PromoCode = promoCode;
            this.PromoDiscount = promoDiscount;
            this.IsAmountDiscount = isAmountDiscount;
            this.AllowCancellation = allowCancellation;
            this.PerSeatEnabled = perSeatEnabled;
            this.CurrencyId = currencyId;
            this.MaxSeatsLimit = maxSeatsLimit;
            this.TrialEnabled = trialEnabled;
            this.TrialDuration = trialDuration;
            this.AllowQueryOverrides = allowQueryOverrides;
            this.AllowPlanChanges = allowPlanChanges;
            this.RefundPeriod = refundPeriod;
            this.WebhookConfiguration = webhookConfiguration;
            this.IsDeleted = isDeleted;
            this.ArchivedAt = archivedAt;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="product_id", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="company_id", EmitDefaultValue=false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="recurring_invoice_id", EmitDefaultValue=false)]
        public string RecurringInvoiceId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="is_recurring", EmitDefaultValue=false)]
        public bool? IsRecurring { get; set; }

        /// <summary>
        /// integer const representation of the frequency
        /// </summary>
        /// <value>integer const representation of the frequency</value>
        [DataMember(Name="frequency_id", EmitDefaultValue=false)]
        public string FrequencyId { get; set; }

        /// <summary>
        /// enum setting
        /// </summary>
        /// <value>enum setting</value>
        [DataMember(Name="auto_bill", EmitDefaultValue=false)]
        public string AutoBill { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="promo_code", EmitDefaultValue=false)]
        public string PromoCode { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="promo_discount", EmitDefaultValue=false)]
        public decimal? PromoDiscount { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="is_amount_discount", EmitDefaultValue=false)]
        public bool? IsAmountDiscount { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="allow_cancellation", EmitDefaultValue=false)]
        public bool? AllowCancellation { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="per_seat_enabled", EmitDefaultValue=false)]
        public bool? PerSeatEnabled { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="currency_id", EmitDefaultValue=false)]
        public int? CurrencyId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="max_seats_limit", EmitDefaultValue=false)]
        public int? MaxSeatsLimit { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="trial_enabled", EmitDefaultValue=false)]
        public bool? TrialEnabled { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="trial_duration", EmitDefaultValue=false)]
        public int? TrialDuration { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="allow_query_overrides", EmitDefaultValue=false)]
        public bool? AllowQueryOverrides { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="allow_plan_changes", EmitDefaultValue=false)]
        public bool? AllowPlanChanges { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="refund_period", EmitDefaultValue=false)]
        public int? RefundPeriod { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="webhook_configuration", EmitDefaultValue=false)]
        public string WebhookConfiguration { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="is_deleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="archived_at", EmitDefaultValue=false)]
        public decimal? ArchivedAt { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public decimal? CreatedAt { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public decimal? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  RecurringInvoiceId: ").Append(RecurringInvoiceId).Append("\n");
            sb.Append("  IsRecurring: ").Append(IsRecurring).Append("\n");
            sb.Append("  FrequencyId: ").Append(FrequencyId).Append("\n");
            sb.Append("  AutoBill: ").Append(AutoBill).Append("\n");
            sb.Append("  PromoCode: ").Append(PromoCode).Append("\n");
            sb.Append("  PromoDiscount: ").Append(PromoDiscount).Append("\n");
            sb.Append("  IsAmountDiscount: ").Append(IsAmountDiscount).Append("\n");
            sb.Append("  AllowCancellation: ").Append(AllowCancellation).Append("\n");
            sb.Append("  PerSeatEnabled: ").Append(PerSeatEnabled).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  MaxSeatsLimit: ").Append(MaxSeatsLimit).Append("\n");
            sb.Append("  TrialEnabled: ").Append(TrialEnabled).Append("\n");
            sb.Append("  TrialDuration: ").Append(TrialDuration).Append("\n");
            sb.Append("  AllowQueryOverrides: ").Append(AllowQueryOverrides).Append("\n");
            sb.Append("  AllowPlanChanges: ").Append(AllowPlanChanges).Append("\n");
            sb.Append("  RefundPeriod: ").Append(RefundPeriod).Append("\n");
            sb.Append("  WebhookConfiguration: ").Append(WebhookConfiguration).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ArchivedAt: ").Append(ArchivedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.RecurringInvoiceId == input.RecurringInvoiceId ||
                    (this.RecurringInvoiceId != null &&
                    this.RecurringInvoiceId.Equals(input.RecurringInvoiceId))
                ) && 
                (
                    this.IsRecurring == input.IsRecurring ||
                    (this.IsRecurring != null &&
                    this.IsRecurring.Equals(input.IsRecurring))
                ) && 
                (
                    this.FrequencyId == input.FrequencyId ||
                    (this.FrequencyId != null &&
                    this.FrequencyId.Equals(input.FrequencyId))
                ) && 
                (
                    this.AutoBill == input.AutoBill ||
                    (this.AutoBill != null &&
                    this.AutoBill.Equals(input.AutoBill))
                ) && 
                (
                    this.PromoCode == input.PromoCode ||
                    (this.PromoCode != null &&
                    this.PromoCode.Equals(input.PromoCode))
                ) && 
                (
                    this.PromoDiscount == input.PromoDiscount ||
                    (this.PromoDiscount != null &&
                    this.PromoDiscount.Equals(input.PromoDiscount))
                ) && 
                (
                    this.IsAmountDiscount == input.IsAmountDiscount ||
                    (this.IsAmountDiscount != null &&
                    this.IsAmountDiscount.Equals(input.IsAmountDiscount))
                ) && 
                (
                    this.AllowCancellation == input.AllowCancellation ||
                    (this.AllowCancellation != null &&
                    this.AllowCancellation.Equals(input.AllowCancellation))
                ) && 
                (
                    this.PerSeatEnabled == input.PerSeatEnabled ||
                    (this.PerSeatEnabled != null &&
                    this.PerSeatEnabled.Equals(input.PerSeatEnabled))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.MaxSeatsLimit == input.MaxSeatsLimit ||
                    (this.MaxSeatsLimit != null &&
                    this.MaxSeatsLimit.Equals(input.MaxSeatsLimit))
                ) && 
                (
                    this.TrialEnabled == input.TrialEnabled ||
                    (this.TrialEnabled != null &&
                    this.TrialEnabled.Equals(input.TrialEnabled))
                ) && 
                (
                    this.TrialDuration == input.TrialDuration ||
                    (this.TrialDuration != null &&
                    this.TrialDuration.Equals(input.TrialDuration))
                ) && 
                (
                    this.AllowQueryOverrides == input.AllowQueryOverrides ||
                    (this.AllowQueryOverrides != null &&
                    this.AllowQueryOverrides.Equals(input.AllowQueryOverrides))
                ) && 
                (
                    this.AllowPlanChanges == input.AllowPlanChanges ||
                    (this.AllowPlanChanges != null &&
                    this.AllowPlanChanges.Equals(input.AllowPlanChanges))
                ) && 
                (
                    this.RefundPeriod == input.RefundPeriod ||
                    (this.RefundPeriod != null &&
                    this.RefundPeriod.Equals(input.RefundPeriod))
                ) && 
                (
                    this.WebhookConfiguration == input.WebhookConfiguration ||
                    (this.WebhookConfiguration != null &&
                    this.WebhookConfiguration.Equals(input.WebhookConfiguration))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.ArchivedAt == input.ArchivedAt ||
                    (this.ArchivedAt != null &&
                    this.ArchivedAt.Equals(input.ArchivedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.RecurringInvoiceId != null)
                    hashCode = hashCode * 59 + this.RecurringInvoiceId.GetHashCode();
                if (this.IsRecurring != null)
                    hashCode = hashCode * 59 + this.IsRecurring.GetHashCode();
                if (this.FrequencyId != null)
                    hashCode = hashCode * 59 + this.FrequencyId.GetHashCode();
                if (this.AutoBill != null)
                    hashCode = hashCode * 59 + this.AutoBill.GetHashCode();
                if (this.PromoCode != null)
                    hashCode = hashCode * 59 + this.PromoCode.GetHashCode();
                if (this.PromoDiscount != null)
                    hashCode = hashCode * 59 + this.PromoDiscount.GetHashCode();
                if (this.IsAmountDiscount != null)
                    hashCode = hashCode * 59 + this.IsAmountDiscount.GetHashCode();
                if (this.AllowCancellation != null)
                    hashCode = hashCode * 59 + this.AllowCancellation.GetHashCode();
                if (this.PerSeatEnabled != null)
                    hashCode = hashCode * 59 + this.PerSeatEnabled.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.MaxSeatsLimit != null)
                    hashCode = hashCode * 59 + this.MaxSeatsLimit.GetHashCode();
                if (this.TrialEnabled != null)
                    hashCode = hashCode * 59 + this.TrialEnabled.GetHashCode();
                if (this.TrialDuration != null)
                    hashCode = hashCode * 59 + this.TrialDuration.GetHashCode();
                if (this.AllowQueryOverrides != null)
                    hashCode = hashCode * 59 + this.AllowQueryOverrides.GetHashCode();
                if (this.AllowPlanChanges != null)
                    hashCode = hashCode * 59 + this.AllowPlanChanges.GetHashCode();
                if (this.RefundPeriod != null)
                    hashCode = hashCode * 59 + this.RefundPeriod.GetHashCode();
                if (this.WebhookConfiguration != null)
                    hashCode = hashCode * 59 + this.WebhookConfiguration.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.ArchivedAt != null)
                    hashCode = hashCode * 59 + this.ArchivedAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
