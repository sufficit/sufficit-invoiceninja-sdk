/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// CompanyUser
    /// </summary>
    [DataContract]
        public partial class CompanyUser :  IEquatable<CompanyUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyUser" /> class.
        /// </summary>
        /// <param name="permissions">The company user permissions.</param>
        /// <param name="settings">The company name.</param>
        /// <param name="isOwner">Determines whether the user owns this company.</param>
        /// <param name="isAdmin">Determines whether the user is the admin of this company.</param>
        /// <param name="isLocked">Determines whether the users access to this company has been locked.</param>
        /// <param name="updatedAt">The last time the record was modified.</param>
        /// <param name="deletedAt">Timestamp when the user was archived.</param>
        /// <param name="account">account.</param>
        /// <param name="company">company.</param>
        /// <param name="user">user.</param>
        /// <param name="token">token.</param>
        public CompanyUser(string permissions = default(string), Object settings = default(Object), bool? isOwner = default(bool?), bool? isAdmin = default(bool?), bool? isLocked = default(bool?), int? updatedAt = default(int?), int? deletedAt = default(int?), Account account = default(Account), Company company = default(Company), User user = default(User), CompanyToken token = default(CompanyToken))
        {
            this.Permissions = permissions;
            this.Settings = settings;
            this.IsOwner = isOwner;
            this.IsAdmin = isAdmin;
            this.IsLocked = isLocked;
            this.UpdatedAt = updatedAt;
            this.DeletedAt = deletedAt;
            this.Account = account;
            this.Company = company;
            this.User = user;
            this.Token = token;
        }
        
        /// <summary>
        /// The company user permissions
        /// </summary>
        /// <value>The company user permissions</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public string Permissions { get; set; }

        /// <summary>
        /// The company name
        /// </summary>
        /// <value>The company name</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public Object Settings { get; set; }

        /// <summary>
        /// Determines whether the user owns this company
        /// </summary>
        /// <value>Determines whether the user owns this company</value>
        [DataMember(Name="is_owner", EmitDefaultValue=false)]
        public bool? IsOwner { get; set; }

        /// <summary>
        /// Determines whether the user is the admin of this company
        /// </summary>
        /// <value>Determines whether the user is the admin of this company</value>
        [DataMember(Name="is_admin", EmitDefaultValue=false)]
        public bool? IsAdmin { get; set; }

        /// <summary>
        /// Determines whether the users access to this company has been locked
        /// </summary>
        /// <value>Determines whether the users access to this company has been locked</value>
        [DataMember(Name="is_locked", EmitDefaultValue=false)]
        public bool? IsLocked { get; set; }

        /// <summary>
        /// The last time the record was modified
        /// </summary>
        /// <value>The last time the record was modified</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public int? UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp when the user was archived
        /// </summary>
        /// <value>Timestamp when the user was archived</value>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public int? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public Account Account { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public Company Company { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public CompanyToken Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyUser {\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyUser);
        }

        /// <summary>
        /// Returns true if CompanyUser instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.IsOwner == input.IsOwner ||
                    (this.IsOwner != null &&
                    this.IsOwner.Equals(input.IsOwner))
                ) && 
                (
                    this.IsAdmin == input.IsAdmin ||
                    (this.IsAdmin != null &&
                    this.IsAdmin.Equals(input.IsAdmin))
                ) && 
                (
                    this.IsLocked == input.IsLocked ||
                    (this.IsLocked != null &&
                    this.IsLocked.Equals(input.IsLocked))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.IsOwner != null)
                    hashCode = hashCode * 59 + this.IsOwner.GetHashCode();
                if (this.IsAdmin != null)
                    hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
                if (this.IsLocked != null)
                    hashCode = hashCode * 59 + this.IsLocked.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
