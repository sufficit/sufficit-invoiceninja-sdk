/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract]
        public partial class Payment :  IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="id">______.</param>
        /// <param name="clientId">______.</param>
        /// <param name="invitationId">______.</param>
        /// <param name="clientContactId">______.</param>
        /// <param name="userId">______.</param>
        /// <param name="typeId">The Payment Type ID.</param>
        /// <param name="date">The Payment date.</param>
        /// <param name="transactionReference">The transaction reference as defined by the payment gateway.</param>
        /// <param name="assignedUserId">______.</param>
        /// <param name="privateNotes">______.</param>
        /// <param name="isManual">______.</param>
        /// <param name="isDeleted">______.</param>
        /// <param name="amount">The amount of this payment.</param>
        /// <param name="refunded">The refunded amount of this payment.</param>
        /// <param name="updatedAt">Timestamp.</param>
        /// <param name="archivedAt">Timestamp.</param>
        /// <param name="companyGatewayId">The company gateway id.</param>
        /// <param name="paymentables">paymentables.</param>
        /// <param name="invoices">invoices.</param>
        /// <param name="credits">credits.</param>
        public Payment(string id = default(string), string clientId = default(string), string invitationId = default(string), string clientContactId = default(string), string userId = default(string), string typeId = default(string), string date = default(string), string transactionReference = default(string), string assignedUserId = default(string), string privateNotes = default(string), bool? isManual = default(bool?), bool? isDeleted = default(bool?), decimal? amount = default(decimal?), decimal? refunded = default(decimal?), decimal? updatedAt = default(decimal?), decimal? archivedAt = default(decimal?), string companyGatewayId = default(string), Paymentable paymentables = default(Paymentable), List<InvoicePaymentable> invoices = default(List<InvoicePaymentable>), List<CreditPaymentable> credits = default(List<CreditPaymentable>))
        {
            this.Id = id;
            this.ClientId = clientId;
            this.InvitationId = invitationId;
            this.ClientContactId = clientContactId;
            this.UserId = userId;
            this.TypeId = typeId;
            this.Date = date;
            this.TransactionReference = transactionReference;
            this.AssignedUserId = assignedUserId;
            this.PrivateNotes = privateNotes;
            this.IsManual = isManual;
            this.IsDeleted = isDeleted;
            this.Amount = amount;
            this.Refunded = refunded;
            this.UpdatedAt = updatedAt;
            this.ArchivedAt = archivedAt;
            this.CompanyGatewayId = companyGatewayId;
            this.Paymentables = paymentables;
            this.Invoices = invoices;
            this.Credits = credits;
        }
        
        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="invitation_id", EmitDefaultValue=false)]
        public string InvitationId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="client_contact_id", EmitDefaultValue=false)]
        public string ClientContactId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// The Payment Type ID
        /// </summary>
        /// <value>The Payment Type ID</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public string TypeId { get; set; }

        /// <summary>
        /// The Payment date
        /// </summary>
        /// <value>The Payment date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// The transaction reference as defined by the payment gateway
        /// </summary>
        /// <value>The transaction reference as defined by the payment gateway</value>
        [DataMember(Name="transaction_reference", EmitDefaultValue=false)]
        public string TransactionReference { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="assigned_user_id", EmitDefaultValue=false)]
        public string AssignedUserId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="private_notes", EmitDefaultValue=false)]
        public string PrivateNotes { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="is_manual", EmitDefaultValue=false)]
        public bool? IsManual { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="is_deleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// The amount of this payment
        /// </summary>
        /// <value>The amount of this payment</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The refunded amount of this payment
        /// </summary>
        /// <value>The refunded amount of this payment</value>
        [DataMember(Name="refunded", EmitDefaultValue=false)]
        public decimal? Refunded { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public decimal? UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="archived_at", EmitDefaultValue=false)]
        public decimal? ArchivedAt { get; set; }

        /// <summary>
        /// The company gateway id
        /// </summary>
        /// <value>The company gateway id</value>
        [DataMember(Name="company_gateway_id", EmitDefaultValue=false)]
        public string CompanyGatewayId { get; set; }

        /// <summary>
        /// Gets or Sets Paymentables
        /// </summary>
        [DataMember(Name="paymentables", EmitDefaultValue=false)]
        public Paymentable Paymentables { get; set; }

        /// <summary>
        /// Gets or Sets Invoices
        /// </summary>
        [DataMember(Name="invoices", EmitDefaultValue=false)]
        public List<InvoicePaymentable> Invoices { get; set; }

        /// <summary>
        /// Gets or Sets Credits
        /// </summary>
        [DataMember(Name="credits", EmitDefaultValue=false)]
        public List<CreditPaymentable> Credits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  ClientContactId: ").Append(ClientContactId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TransactionReference: ").Append(TransactionReference).Append("\n");
            sb.Append("  AssignedUserId: ").Append(AssignedUserId).Append("\n");
            sb.Append("  PrivateNotes: ").Append(PrivateNotes).Append("\n");
            sb.Append("  IsManual: ").Append(IsManual).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Refunded: ").Append(Refunded).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ArchivedAt: ").Append(ArchivedAt).Append("\n");
            sb.Append("  CompanyGatewayId: ").Append(CompanyGatewayId).Append("\n");
            sb.Append("  Paymentables: ").Append(Paymentables).Append("\n");
            sb.Append("  Invoices: ").Append(Invoices).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="input">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.InvitationId == input.InvitationId ||
                    (this.InvitationId != null &&
                    this.InvitationId.Equals(input.InvitationId))
                ) && 
                (
                    this.ClientContactId == input.ClientContactId ||
                    (this.ClientContactId != null &&
                    this.ClientContactId.Equals(input.ClientContactId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.TransactionReference == input.TransactionReference ||
                    (this.TransactionReference != null &&
                    this.TransactionReference.Equals(input.TransactionReference))
                ) && 
                (
                    this.AssignedUserId == input.AssignedUserId ||
                    (this.AssignedUserId != null &&
                    this.AssignedUserId.Equals(input.AssignedUserId))
                ) && 
                (
                    this.PrivateNotes == input.PrivateNotes ||
                    (this.PrivateNotes != null &&
                    this.PrivateNotes.Equals(input.PrivateNotes))
                ) && 
                (
                    this.IsManual == input.IsManual ||
                    (this.IsManual != null &&
                    this.IsManual.Equals(input.IsManual))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Refunded == input.Refunded ||
                    (this.Refunded != null &&
                    this.Refunded.Equals(input.Refunded))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ArchivedAt == input.ArchivedAt ||
                    (this.ArchivedAt != null &&
                    this.ArchivedAt.Equals(input.ArchivedAt))
                ) && 
                (
                    this.CompanyGatewayId == input.CompanyGatewayId ||
                    (this.CompanyGatewayId != null &&
                    this.CompanyGatewayId.Equals(input.CompanyGatewayId))
                ) && 
                (
                    this.Paymentables == input.Paymentables ||
                    (this.Paymentables != null &&
                    this.Paymentables.Equals(input.Paymentables))
                ) && 
                (
                    this.Invoices == input.Invoices ||
                    this.Invoices != null &&
                    input.Invoices != null &&
                    this.Invoices.SequenceEqual(input.Invoices)
                ) && 
                (
                    this.Credits == input.Credits ||
                    this.Credits != null &&
                    input.Credits != null &&
                    this.Credits.SequenceEqual(input.Credits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.InvitationId != null)
                    hashCode = hashCode * 59 + this.InvitationId.GetHashCode();
                if (this.ClientContactId != null)
                    hashCode = hashCode * 59 + this.ClientContactId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.TransactionReference != null)
                    hashCode = hashCode * 59 + this.TransactionReference.GetHashCode();
                if (this.AssignedUserId != null)
                    hashCode = hashCode * 59 + this.AssignedUserId.GetHashCode();
                if (this.PrivateNotes != null)
                    hashCode = hashCode * 59 + this.PrivateNotes.GetHashCode();
                if (this.IsManual != null)
                    hashCode = hashCode * 59 + this.IsManual.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Refunded != null)
                    hashCode = hashCode * 59 + this.Refunded.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.ArchivedAt != null)
                    hashCode = hashCode * 59 + this.ArchivedAt.GetHashCode();
                if (this.CompanyGatewayId != null)
                    hashCode = hashCode * 59 + this.CompanyGatewayId.GetHashCode();
                if (this.Paymentables != null)
                    hashCode = hashCode * 59 + this.Paymentables.GetHashCode();
                if (this.Invoices != null)
                    hashCode = hashCode * 59 + this.Invoices.GetHashCode();
                if (this.Credits != null)
                    hashCode = hashCode * 59 + this.Credits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
