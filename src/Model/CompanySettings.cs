/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// CompanySettings
    /// </summary>
    [DataContract]
        public partial class CompanySettings :  IEquatable<CompanySettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanySettings" /> class.
        /// </summary>
        /// <param name="timezoneId">The timezone id.</param>
        /// <param name="dateFormatId">____________.</param>
        /// <param name="militaryTime">____________.</param>
        /// <param name="languageId">____________.</param>
        /// <param name="showCurrencyCode">____________.</param>
        /// <param name="currencyId">The default currency id.</param>
        /// <param name="paymentTerms">-1 sets no payment term, 0 sets payment due immediately, positive integers indicates payment terms in days.</param>
        /// <param name="companyGatewayIds">A commad separate list of available gateways.</param>
        /// <param name="customValue1">____________.</param>
        /// <param name="customValue2">____________.</param>
        /// <param name="customValue3">____________.</param>
        /// <param name="customValue4">____________.</param>
        /// <param name="defaultTaskRate">____________.</param>
        /// <param name="sendReminders">____________.</param>
        /// <param name="enableClientPortalTasks">____________.</param>
        /// <param name="emailStyle">options include plain,light,dark,custom.</param>
        /// <param name="replyToEmail">The reply to email address.</param>
        /// <param name="bccEmail">A comma separate list of BCC emails.</param>
        /// <param name="pdfEmailAttachment">Toggles whether to attach PDF as attachment.</param>
        /// <param name="ublEmailAttachment">Toggles whether to attach UBL as attachment.</param>
        /// <param name="emailStyleCustom">The custom template.</param>
        /// <param name="counterNumberApplied">enum when the invoice number counter is set, ie when_saved, when_sent, when_paid.</param>
        /// <param name="quoteNumberApplied">enum when the quote number counter is set, ie when_saved, when_sent.</param>
        /// <param name="customMessageDashboard">____________.</param>
        /// <param name="customMessageUnpaidInvoice">____________.</param>
        /// <param name="customMessagePaidInvoice">____________.</param>
        /// <param name="customMessageUnapprovedQuote">____________.</param>
        /// <param name="lockInvoices">____________.</param>
        /// <param name="autoArchiveInvoice">____________.</param>
        /// <param name="autoArchiveQuote">____________.</param>
        /// <param name="autoConvertQuote">____________.</param>
        /// <param name="inclusiveTaxes">____________.</param>
        /// <param name="translations">JSON payload of customized translations.</param>
        /// <param name="taskNumberPattern">Allows customisation of the task number pattern.</param>
        /// <param name="taskNumberCounter">____________.</param>
        /// <param name="reminderSendTime">Time from UTC +0 when the email will be sent to the client.</param>
        /// <param name="expenseNumberPattern">Allows customisation of the expense number pattern.</param>
        /// <param name="expenseNumberCounter">____________.</param>
        /// <param name="vendorNumberPattern">Allows customisation of the vendor number pattern.</param>
        /// <param name="vendorNumberCounter">____________.</param>
        /// <param name="ticketNumberPattern">Allows customisation of the ticket number pattern.</param>
        /// <param name="ticketNumberCounter">____________.</param>
        /// <param name="paymentNumberPattern">Allows customisation of the payment number pattern.</param>
        /// <param name="paymentNumberCounter">____________.</param>
        /// <param name="invoiceNumberPattern">Allows customisation of the invoice number pattern.</param>
        /// <param name="invoiceNumberCounter">____________.</param>
        /// <param name="quoteNumberPattern">Allows customisation of the quote number pattern.</param>
        /// <param name="quoteNumberCounter">____________.</param>
        /// <param name="clientNumberPattern">Allows customisation of the client number pattern.</param>
        /// <param name="clientNumberCounter">____________.</param>
        /// <param name="creditNumberPattern">Allows customisation of the credit number pattern.</param>
        /// <param name="creditNumberCounter">____________.</param>
        /// <param name="recurringInvoiceNumberPrefix">This string is prepended to the recurring invoice number.</param>
        /// <param name="resetCounterFrequencyId">CONSTANT which is used to apply the frequency which the counters are reset.</param>
        /// <param name="resetCounterDate">The explicit date which is used to reset counters.</param>
        /// <param name="counterPadding">Pads the counter with leading zeros.</param>
        /// <param name="sharedInvoiceQuoteCounter">Flags whether to share the counter for invoices and quotes.</param>
        /// <param name="updateProducts">Determines if client fields are updated from third party APIs.</param>
        /// <param name="convertProducts">convertProducts.</param>
        /// <param name="fillProducts">Automatically fill products based on product_key.</param>
        /// <param name="invoiceTerms">The default invoice terms.</param>
        /// <param name="quoteTerms">The default quote terms.</param>
        /// <param name="invoiceTaxes">Taxes can be applied to the invoice.</param>
        /// <param name="invoiceDesignId">The default design id (invoice, quote etc).</param>
        /// <param name="quoteDesignId">The default design id (invoice, quote etc).</param>
        /// <param name="invoiceFooter">The default invoice footer.</param>
        /// <param name="invoiceLabels">JSON string of invoice labels.</param>
        /// <param name="taxRate1">The tax rate (float).</param>
        /// <param name="taxName1">The tax name.</param>
        /// <param name="taxRate2">The tax rate (float).</param>
        /// <param name="taxName2">The tax name.</param>
        /// <param name="taxRate3">The tax rate (float).</param>
        /// <param name="taxName3">The tax name.</param>
        /// <param name="paymentTypeId">The default payment type id.</param>
        /// <param name="customFields">JSON string of custom fields.</param>
        /// <param name="emailFooter">The default email footer.</param>
        /// <param name="emailSendingMethod">The email driver to use to send email, options include default, gmail.</param>
        /// <param name="gmailSendingUserId">The hashed_id of the user account to send email from.</param>
        /// <param name="emailSubjectInvoice">emailSubjectInvoice.</param>
        /// <param name="emailSubjectQuote">emailSubjectQuote.</param>
        /// <param name="emailSubjectPayment">emailSubjectPayment.</param>
        /// <param name="emailTemplateInvoice">The full template for invoice emails.</param>
        /// <param name="emailTemplateQuote">The full template for quote emails.</param>
        /// <param name="emailTemplatePayment">The full template for payment emails.</param>
        /// <param name="emailSubjectReminder1">Email subject for Reminder.</param>
        /// <param name="emailSubjectReminder2">Email subject for Reminder.</param>
        /// <param name="emailSubjectReminder3">Email subject for Reminder.</param>
        /// <param name="emailSubjectReminderEndless">Email subject for endless reminders.</param>
        /// <param name="emailTemplateReminder1">The full template for Reminder 1.</param>
        /// <param name="emailTemplateReminder2">The full template for Reminder 2.</param>
        /// <param name="emailTemplateReminder3">The full template for Reminder 3.</param>
        /// <param name="emailTemplateReminderEndless">The full template for enless reminders.</param>
        /// <param name="enablePortalPassword">Toggles whether a password is required to log into the client portal.</param>
        /// <param name="showAcceptInvoiceTerms">Toggles whether the terms dialogue is shown to the client.</param>
        /// <param name="showAcceptQuoteTerms">Toggles whether the terms dialogue is shown to the client.</param>
        /// <param name="requireInvoiceSignature">Toggles whether a invoice signature is required.</param>
        /// <param name="requireQuoteSignature">Toggles whether a quote signature is required.</param>
        /// <param name="name">The company name.</param>
        /// <param name="companyLogo">The company logo file.</param>
        /// <param name="website">The company website URL.</param>
        /// <param name="address1">____________.</param>
        /// <param name="address2">____________.</param>
        /// <param name="city">____________.</param>
        /// <param name="state">____________.</param>
        /// <param name="postalCode">____________.</param>
        /// <param name="phone">____________.</param>
        /// <param name="email">____________.</param>
        /// <param name="countryId">The country ID.</param>
        /// <param name="vatNumber">____________.</param>
        /// <param name="pageSize">The default page size.</param>
        /// <param name="fontSize">The font size.</param>
        /// <param name="primaryFont">The primary font.</param>
        /// <param name="secondaryFont">The secondary font.</param>
        /// <param name="hidePaidToDate">____________.</param>
        /// <param name="embedDocuments">____________.</param>
        /// <param name="allPagesHeader">____________.</param>
        /// <param name="allPagesFooter">____________.</param>
        /// <param name="documentEmailAttachment">____________.</param>
        /// <param name="enableClientPortalPassword">____________.</param>
        /// <param name="enableEmailMarkup">____________.</param>
        /// <param name="enableClientPortalDashboard">____________.</param>
        /// <param name="enableClientPortal">____________.</param>
        /// <param name="emailTemplateStatement">____________.</param>
        /// <param name="emailSubjectStatement">____________.</param>
        /// <param name="signatureOnPdf">____________.</param>
        /// <param name="quoteFooter">____________.</param>
        /// <param name="emailSubjectCustom1">____________.</param>
        /// <param name="emailSubjectCustom2">____________.</param>
        /// <param name="emailSubjectCustom3">____________.</param>
        /// <param name="emailTemplateCustom1">____________.</param>
        /// <param name="emailTemplateCustom2">____________.</param>
        /// <param name="emailTemplateCustom3">____________.</param>
        /// <param name="enableReminder1">____________.</param>
        /// <param name="enableReminder2">____________.</param>
        /// <param name="enableReminder3">____________.</param>
        /// <param name="numDaysReminder1">The Reminder interval.</param>
        /// <param name="numDaysReminder2">The Reminder interval.</param>
        /// <param name="numDaysReminder3">The Reminder interval.</param>
        /// <param name="scheduleReminder1">(enum: after_invoice_date, before_due_date, after_due_date).</param>
        /// <param name="scheduleReminder2">(enum: after_invoice_date, before_due_date, after_due_date).</param>
        /// <param name="scheduleReminder3">(enum: after_invoice_date, before_due_date, after_due_date).</param>
        /// <param name="lateFeeAmount1">____________.</param>
        /// <param name="lateFeeAmount2">____________.</param>
        /// <param name="lateFeeAmount3">____________.</param>
        /// <param name="endlessReminderFrequencyId">____________.</param>
        /// <param name="clientOnlinePaymentNotification">____________.</param>
        /// <param name="clientManualPaymentNotification">____________.</param>
        public CompanySettings(string timezoneId = default(string), string dateFormatId = default(string), bool? militaryTime = default(bool?), string languageId = default(string), bool? showCurrencyCode = default(bool?), string currencyId = default(string), int? paymentTerms = default(int?), string companyGatewayIds = default(string), string customValue1 = default(string), string customValue2 = default(string), string customValue3 = default(string), string customValue4 = default(string), float? defaultTaskRate = default(float?), bool? sendReminders = default(bool?), bool? enableClientPortalTasks = default(bool?), string emailStyle = default(string), string replyToEmail = default(string), string bccEmail = default(string), bool? pdfEmailAttachment = default(bool?), bool? ublEmailAttachment = default(bool?), string emailStyleCustom = default(string), string counterNumberApplied = default(string), string quoteNumberApplied = default(string), string customMessageDashboard = default(string), string customMessageUnpaidInvoice = default(string), string customMessagePaidInvoice = default(string), string customMessageUnapprovedQuote = default(string), bool? lockInvoices = default(bool?), bool? autoArchiveInvoice = default(bool?), bool? autoArchiveQuote = default(bool?), bool? autoConvertQuote = default(bool?), bool? inclusiveTaxes = default(bool?), Object translations = default(Object), string taskNumberPattern = default(string), int? taskNumberCounter = default(int?), int? reminderSendTime = default(int?), string expenseNumberPattern = default(string), int? expenseNumberCounter = default(int?), string vendorNumberPattern = default(string), int? vendorNumberCounter = default(int?), string ticketNumberPattern = default(string), int? ticketNumberCounter = default(int?), string paymentNumberPattern = default(string), int? paymentNumberCounter = default(int?), string invoiceNumberPattern = default(string), int? invoiceNumberCounter = default(int?), string quoteNumberPattern = default(string), int? quoteNumberCounter = default(int?), string clientNumberPattern = default(string), int? clientNumberCounter = default(int?), string creditNumberPattern = default(string), int? creditNumberCounter = default(int?), string recurringInvoiceNumberPrefix = default(string), int? resetCounterFrequencyId = default(int?), string resetCounterDate = default(string), int? counterPadding = default(int?), bool? sharedInvoiceQuoteCounter = default(bool?), bool? updateProducts = default(bool?), bool? convertProducts = default(bool?), bool? fillProducts = default(bool?), string invoiceTerms = default(string), string quoteTerms = default(string), decimal? invoiceTaxes = default(decimal?), string invoiceDesignId = default(string), string quoteDesignId = default(string), string invoiceFooter = default(string), string invoiceLabels = default(string), decimal? taxRate1 = default(decimal?), string taxName1 = default(string), decimal? taxRate2 = default(decimal?), string taxName2 = default(string), decimal? taxRate3 = default(decimal?), string taxName3 = default(string), string paymentTypeId = default(string), string customFields = default(string), string emailFooter = default(string), string emailSendingMethod = default(string), string gmailSendingUserId = default(string), string emailSubjectInvoice = default(string), string emailSubjectQuote = default(string), string emailSubjectPayment = default(string), string emailTemplateInvoice = default(string), string emailTemplateQuote = default(string), string emailTemplatePayment = default(string), string emailSubjectReminder1 = default(string), string emailSubjectReminder2 = default(string), string emailSubjectReminder3 = default(string), string emailSubjectReminderEndless = default(string), string emailTemplateReminder1 = default(string), string emailTemplateReminder2 = default(string), string emailTemplateReminder3 = default(string), string emailTemplateReminderEndless = default(string), bool? enablePortalPassword = default(bool?), bool? showAcceptInvoiceTerms = default(bool?), bool? showAcceptQuoteTerms = default(bool?), bool? requireInvoiceSignature = default(bool?), bool? requireQuoteSignature = default(bool?), string name = default(string), Object companyLogo = default(Object), string website = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string phone = default(string), string email = default(string), string countryId = default(string), string vatNumber = default(string), string pageSize = default(string), decimal? fontSize = default(decimal?), string primaryFont = default(string), string secondaryFont = default(string), bool? hidePaidToDate = default(bool?), bool? embedDocuments = default(bool?), bool? allPagesHeader = default(bool?), bool? allPagesFooter = default(bool?), bool? documentEmailAttachment = default(bool?), bool? enableClientPortalPassword = default(bool?), bool? enableEmailMarkup = default(bool?), bool? enableClientPortalDashboard = default(bool?), bool? enableClientPortal = default(bool?), string emailTemplateStatement = default(string), string emailSubjectStatement = default(string), bool? signatureOnPdf = default(bool?), string quoteFooter = default(string), string emailSubjectCustom1 = default(string), string emailSubjectCustom2 = default(string), string emailSubjectCustom3 = default(string), string emailTemplateCustom1 = default(string), string emailTemplateCustom2 = default(string), string emailTemplateCustom3 = default(string), bool? enableReminder1 = default(bool?), bool? enableReminder2 = default(bool?), bool? enableReminder3 = default(bool?), decimal? numDaysReminder1 = default(decimal?), decimal? numDaysReminder2 = default(decimal?), decimal? numDaysReminder3 = default(decimal?), string scheduleReminder1 = default(string), string scheduleReminder2 = default(string), string scheduleReminder3 = default(string), decimal? lateFeeAmount1 = default(decimal?), decimal? lateFeeAmount2 = default(decimal?), decimal? lateFeeAmount3 = default(decimal?), string endlessReminderFrequencyId = default(string), bool? clientOnlinePaymentNotification = default(bool?), bool? clientManualPaymentNotification = default(bool?))
        {
            this.TimezoneId = timezoneId;
            this.DateFormatId = dateFormatId;
            this.MilitaryTime = militaryTime;
            this.LanguageId = languageId;
            this.ShowCurrencyCode = showCurrencyCode;
            this.CurrencyId = currencyId;
            this.PaymentTerms = paymentTerms;
            this.CompanyGatewayIds = companyGatewayIds;
            this.CustomValue1 = customValue1;
            this.CustomValue2 = customValue2;
            this.CustomValue3 = customValue3;
            this.CustomValue4 = customValue4;
            this.DefaultTaskRate = defaultTaskRate;
            this.SendReminders = sendReminders;
            this.EnableClientPortalTasks = enableClientPortalTasks;
            this.EmailStyle = emailStyle;
            this.ReplyToEmail = replyToEmail;
            this.BccEmail = bccEmail;
            this.PdfEmailAttachment = pdfEmailAttachment;
            this.UblEmailAttachment = ublEmailAttachment;
            this.EmailStyleCustom = emailStyleCustom;
            this.CounterNumberApplied = counterNumberApplied;
            this.QuoteNumberApplied = quoteNumberApplied;
            this.CustomMessageDashboard = customMessageDashboard;
            this.CustomMessageUnpaidInvoice = customMessageUnpaidInvoice;
            this.CustomMessagePaidInvoice = customMessagePaidInvoice;
            this.CustomMessageUnapprovedQuote = customMessageUnapprovedQuote;
            this.LockInvoices = lockInvoices;
            this.AutoArchiveInvoice = autoArchiveInvoice;
            this.AutoArchiveQuote = autoArchiveQuote;
            this.AutoConvertQuote = autoConvertQuote;
            this.InclusiveTaxes = inclusiveTaxes;
            this.Translations = translations;
            this.TaskNumberPattern = taskNumberPattern;
            this.TaskNumberCounter = taskNumberCounter;
            this.ReminderSendTime = reminderSendTime;
            this.ExpenseNumberPattern = expenseNumberPattern;
            this.ExpenseNumberCounter = expenseNumberCounter;
            this.VendorNumberPattern = vendorNumberPattern;
            this.VendorNumberCounter = vendorNumberCounter;
            this.TicketNumberPattern = ticketNumberPattern;
            this.TicketNumberCounter = ticketNumberCounter;
            this.PaymentNumberPattern = paymentNumberPattern;
            this.PaymentNumberCounter = paymentNumberCounter;
            this.InvoiceNumberPattern = invoiceNumberPattern;
            this.InvoiceNumberCounter = invoiceNumberCounter;
            this.QuoteNumberPattern = quoteNumberPattern;
            this.QuoteNumberCounter = quoteNumberCounter;
            this.ClientNumberPattern = clientNumberPattern;
            this.ClientNumberCounter = clientNumberCounter;
            this.CreditNumberPattern = creditNumberPattern;
            this.CreditNumberCounter = creditNumberCounter;
            this.RecurringInvoiceNumberPrefix = recurringInvoiceNumberPrefix;
            this.ResetCounterFrequencyId = resetCounterFrequencyId;
            this.ResetCounterDate = resetCounterDate;
            this.CounterPadding = counterPadding;
            this.SharedInvoiceQuoteCounter = sharedInvoiceQuoteCounter;
            this.UpdateProducts = updateProducts;
            this.ConvertProducts = convertProducts;
            this.FillProducts = fillProducts;
            this.InvoiceTerms = invoiceTerms;
            this.QuoteTerms = quoteTerms;
            this.InvoiceTaxes = invoiceTaxes;
            this.InvoiceDesignId = invoiceDesignId;
            this.QuoteDesignId = quoteDesignId;
            this.InvoiceFooter = invoiceFooter;
            this.InvoiceLabels = invoiceLabels;
            this.TaxRate1 = taxRate1;
            this.TaxName1 = taxName1;
            this.TaxRate2 = taxRate2;
            this.TaxName2 = taxName2;
            this.TaxRate3 = taxRate3;
            this.TaxName3 = taxName3;
            this.PaymentTypeId = paymentTypeId;
            this.CustomFields = customFields;
            this.EmailFooter = emailFooter;
            this.EmailSendingMethod = emailSendingMethod;
            this.GmailSendingUserId = gmailSendingUserId;
            this.EmailSubjectInvoice = emailSubjectInvoice;
            this.EmailSubjectQuote = emailSubjectQuote;
            this.EmailSubjectPayment = emailSubjectPayment;
            this.EmailTemplateInvoice = emailTemplateInvoice;
            this.EmailTemplateQuote = emailTemplateQuote;
            this.EmailTemplatePayment = emailTemplatePayment;
            this.EmailSubjectReminder1 = emailSubjectReminder1;
            this.EmailSubjectReminder2 = emailSubjectReminder2;
            this.EmailSubjectReminder3 = emailSubjectReminder3;
            this.EmailSubjectReminderEndless = emailSubjectReminderEndless;
            this.EmailTemplateReminder1 = emailTemplateReminder1;
            this.EmailTemplateReminder2 = emailTemplateReminder2;
            this.EmailTemplateReminder3 = emailTemplateReminder3;
            this.EmailTemplateReminderEndless = emailTemplateReminderEndless;
            this.EnablePortalPassword = enablePortalPassword;
            this.ShowAcceptInvoiceTerms = showAcceptInvoiceTerms;
            this.ShowAcceptQuoteTerms = showAcceptQuoteTerms;
            this.RequireInvoiceSignature = requireInvoiceSignature;
            this.RequireQuoteSignature = requireQuoteSignature;
            this.Name = name;
            this.CompanyLogo = companyLogo;
            this.Website = website;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.PostalCode = postalCode;
            this.Phone = phone;
            this.Email = email;
            this.CountryId = countryId;
            this.VatNumber = vatNumber;
            this.PageSize = pageSize;
            this.FontSize = fontSize;
            this.PrimaryFont = primaryFont;
            this.SecondaryFont = secondaryFont;
            this.HidePaidToDate = hidePaidToDate;
            this.EmbedDocuments = embedDocuments;
            this.AllPagesHeader = allPagesHeader;
            this.AllPagesFooter = allPagesFooter;
            this.DocumentEmailAttachment = documentEmailAttachment;
            this.EnableClientPortalPassword = enableClientPortalPassword;
            this.EnableEmailMarkup = enableEmailMarkup;
            this.EnableClientPortalDashboard = enableClientPortalDashboard;
            this.EnableClientPortal = enableClientPortal;
            this.EmailTemplateStatement = emailTemplateStatement;
            this.EmailSubjectStatement = emailSubjectStatement;
            this.SignatureOnPdf = signatureOnPdf;
            this.QuoteFooter = quoteFooter;
            this.EmailSubjectCustom1 = emailSubjectCustom1;
            this.EmailSubjectCustom2 = emailSubjectCustom2;
            this.EmailSubjectCustom3 = emailSubjectCustom3;
            this.EmailTemplateCustom1 = emailTemplateCustom1;
            this.EmailTemplateCustom2 = emailTemplateCustom2;
            this.EmailTemplateCustom3 = emailTemplateCustom3;
            this.EnableReminder1 = enableReminder1;
            this.EnableReminder2 = enableReminder2;
            this.EnableReminder3 = enableReminder3;
            this.NumDaysReminder1 = numDaysReminder1;
            this.NumDaysReminder2 = numDaysReminder2;
            this.NumDaysReminder3 = numDaysReminder3;
            this.ScheduleReminder1 = scheduleReminder1;
            this.ScheduleReminder2 = scheduleReminder2;
            this.ScheduleReminder3 = scheduleReminder3;
            this.LateFeeAmount1 = lateFeeAmount1;
            this.LateFeeAmount2 = lateFeeAmount2;
            this.LateFeeAmount3 = lateFeeAmount3;
            this.EndlessReminderFrequencyId = endlessReminderFrequencyId;
            this.ClientOnlinePaymentNotification = clientOnlinePaymentNotification;
            this.ClientManualPaymentNotification = clientManualPaymentNotification;
        }
        
        /// <summary>
        /// The timezone id
        /// </summary>
        /// <value>The timezone id</value>
        [DataMember(Name="timezone_id", EmitDefaultValue=false)]
        public string TimezoneId { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="date_format_id", EmitDefaultValue=false)]
        public string DateFormatId { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="military_time", EmitDefaultValue=false)]
        public bool? MilitaryTime { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="language_id", EmitDefaultValue=false)]
        public string LanguageId { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="show_currency_code", EmitDefaultValue=false)]
        public bool? ShowCurrencyCode { get; set; }

        /// <summary>
        /// The default currency id
        /// </summary>
        /// <value>The default currency id</value>
        [DataMember(Name="currency_id", EmitDefaultValue=false)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// -1 sets no payment term, 0 sets payment due immediately, positive integers indicates payment terms in days
        /// </summary>
        /// <value>-1 sets no payment term, 0 sets payment due immediately, positive integers indicates payment terms in days</value>
        [DataMember(Name="payment_terms", EmitDefaultValue=false)]
        public int? PaymentTerms { get; set; }

        /// <summary>
        /// A commad separate list of available gateways
        /// </summary>
        /// <value>A commad separate list of available gateways</value>
        [DataMember(Name="company_gateway_ids", EmitDefaultValue=false)]
        public string CompanyGatewayIds { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_value1", EmitDefaultValue=false)]
        public string CustomValue1 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_value2", EmitDefaultValue=false)]
        public string CustomValue2 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_value3", EmitDefaultValue=false)]
        public string CustomValue3 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_value4", EmitDefaultValue=false)]
        public string CustomValue4 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="default_task_rate", EmitDefaultValue=false)]
        public float? DefaultTaskRate { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="send_reminders", EmitDefaultValue=false)]
        public bool? SendReminders { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_client_portal_tasks", EmitDefaultValue=false)]
        public bool? EnableClientPortalTasks { get; set; }

        /// <summary>
        /// options include plain,light,dark,custom
        /// </summary>
        /// <value>options include plain,light,dark,custom</value>
        [DataMember(Name="email_style", EmitDefaultValue=false)]
        public string EmailStyle { get; set; }

        /// <summary>
        /// The reply to email address
        /// </summary>
        /// <value>The reply to email address</value>
        [DataMember(Name="reply_to_email", EmitDefaultValue=false)]
        public string ReplyToEmail { get; set; }

        /// <summary>
        /// A comma separate list of BCC emails
        /// </summary>
        /// <value>A comma separate list of BCC emails</value>
        [DataMember(Name="bcc_email", EmitDefaultValue=false)]
        public string BccEmail { get; set; }

        /// <summary>
        /// Toggles whether to attach PDF as attachment
        /// </summary>
        /// <value>Toggles whether to attach PDF as attachment</value>
        [DataMember(Name="pdf_email_attachment", EmitDefaultValue=false)]
        public bool? PdfEmailAttachment { get; set; }

        /// <summary>
        /// Toggles whether to attach UBL as attachment
        /// </summary>
        /// <value>Toggles whether to attach UBL as attachment</value>
        [DataMember(Name="ubl_email_attachment", EmitDefaultValue=false)]
        public bool? UblEmailAttachment { get; set; }

        /// <summary>
        /// The custom template
        /// </summary>
        /// <value>The custom template</value>
        [DataMember(Name="email_style_custom", EmitDefaultValue=false)]
        public string EmailStyleCustom { get; set; }

        /// <summary>
        /// enum when the invoice number counter is set, ie when_saved, when_sent, when_paid
        /// </summary>
        /// <value>enum when the invoice number counter is set, ie when_saved, when_sent, when_paid</value>
        [DataMember(Name="counter_number_applied", EmitDefaultValue=false)]
        public string CounterNumberApplied { get; set; }

        /// <summary>
        /// enum when the quote number counter is set, ie when_saved, when_sent
        /// </summary>
        /// <value>enum when the quote number counter is set, ie when_saved, when_sent</value>
        [DataMember(Name="quote_number_applied", EmitDefaultValue=false)]
        public string QuoteNumberApplied { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_message_dashboard", EmitDefaultValue=false)]
        public string CustomMessageDashboard { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_message_unpaid_invoice", EmitDefaultValue=false)]
        public string CustomMessageUnpaidInvoice { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_message_paid_invoice", EmitDefaultValue=false)]
        public string CustomMessagePaidInvoice { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="custom_message_unapproved_quote", EmitDefaultValue=false)]
        public string CustomMessageUnapprovedQuote { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="lock_invoices", EmitDefaultValue=false)]
        public bool? LockInvoices { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="auto_archive_invoice", EmitDefaultValue=false)]
        public bool? AutoArchiveInvoice { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="auto_archive_quote", EmitDefaultValue=false)]
        public bool? AutoArchiveQuote { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="auto_convert_quote", EmitDefaultValue=false)]
        public bool? AutoConvertQuote { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="inclusive_taxes", EmitDefaultValue=false)]
        public bool? InclusiveTaxes { get; set; }

        /// <summary>
        /// JSON payload of customized translations
        /// </summary>
        /// <value>JSON payload of customized translations</value>
        [DataMember(Name="translations", EmitDefaultValue=false)]
        public Object Translations { get; set; }

        /// <summary>
        /// Allows customisation of the task number pattern
        /// </summary>
        /// <value>Allows customisation of the task number pattern</value>
        [DataMember(Name="task_number_pattern", EmitDefaultValue=false)]
        public string TaskNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="task_number_counter", EmitDefaultValue=false)]
        public int? TaskNumberCounter { get; set; }

        /// <summary>
        /// Time from UTC +0 when the email will be sent to the client
        /// </summary>
        /// <value>Time from UTC +0 when the email will be sent to the client</value>
        [DataMember(Name="reminder_send_time", EmitDefaultValue=false)]
        public int? ReminderSendTime { get; set; }

        /// <summary>
        /// Allows customisation of the expense number pattern
        /// </summary>
        /// <value>Allows customisation of the expense number pattern</value>
        [DataMember(Name="expense_number_pattern", EmitDefaultValue=false)]
        public string ExpenseNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="expense_number_counter", EmitDefaultValue=false)]
        public int? ExpenseNumberCounter { get; set; }

        /// <summary>
        /// Allows customisation of the vendor number pattern
        /// </summary>
        /// <value>Allows customisation of the vendor number pattern</value>
        [DataMember(Name="vendor_number_pattern", EmitDefaultValue=false)]
        public string VendorNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="vendor_number_counter", EmitDefaultValue=false)]
        public int? VendorNumberCounter { get; set; }

        /// <summary>
        /// Allows customisation of the ticket number pattern
        /// </summary>
        /// <value>Allows customisation of the ticket number pattern</value>
        [DataMember(Name="ticket_number_pattern", EmitDefaultValue=false)]
        public string TicketNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="ticket_number_counter", EmitDefaultValue=false)]
        public int? TicketNumberCounter { get; set; }

        /// <summary>
        /// Allows customisation of the payment number pattern
        /// </summary>
        /// <value>Allows customisation of the payment number pattern</value>
        [DataMember(Name="payment_number_pattern", EmitDefaultValue=false)]
        public string PaymentNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="payment_number_counter", EmitDefaultValue=false)]
        public int? PaymentNumberCounter { get; set; }

        /// <summary>
        /// Allows customisation of the invoice number pattern
        /// </summary>
        /// <value>Allows customisation of the invoice number pattern</value>
        [DataMember(Name="invoice_number_pattern", EmitDefaultValue=false)]
        public string InvoiceNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="invoice_number_counter", EmitDefaultValue=false)]
        public int? InvoiceNumberCounter { get; set; }

        /// <summary>
        /// Allows customisation of the quote number pattern
        /// </summary>
        /// <value>Allows customisation of the quote number pattern</value>
        [DataMember(Name="quote_number_pattern", EmitDefaultValue=false)]
        public string QuoteNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="quote_number_counter", EmitDefaultValue=false)]
        public int? QuoteNumberCounter { get; set; }

        /// <summary>
        /// Allows customisation of the client number pattern
        /// </summary>
        /// <value>Allows customisation of the client number pattern</value>
        [DataMember(Name="client_number_pattern", EmitDefaultValue=false)]
        public string ClientNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="client_number_counter", EmitDefaultValue=false)]
        public int? ClientNumberCounter { get; set; }

        /// <summary>
        /// Allows customisation of the credit number pattern
        /// </summary>
        /// <value>Allows customisation of the credit number pattern</value>
        [DataMember(Name="credit_number_pattern", EmitDefaultValue=false)]
        public string CreditNumberPattern { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="credit_number_counter", EmitDefaultValue=false)]
        public int? CreditNumberCounter { get; set; }

        /// <summary>
        /// This string is prepended to the recurring invoice number
        /// </summary>
        /// <value>This string is prepended to the recurring invoice number</value>
        [DataMember(Name="recurring_invoice_number_prefix", EmitDefaultValue=false)]
        public string RecurringInvoiceNumberPrefix { get; set; }

        /// <summary>
        /// CONSTANT which is used to apply the frequency which the counters are reset
        /// </summary>
        /// <value>CONSTANT which is used to apply the frequency which the counters are reset</value>
        [DataMember(Name="reset_counter_frequency_id", EmitDefaultValue=false)]
        public int? ResetCounterFrequencyId { get; set; }

        /// <summary>
        /// The explicit date which is used to reset counters
        /// </summary>
        /// <value>The explicit date which is used to reset counters</value>
        [DataMember(Name="reset_counter_date", EmitDefaultValue=false)]
        public string ResetCounterDate { get; set; }

        /// <summary>
        /// Pads the counter with leading zeros
        /// </summary>
        /// <value>Pads the counter with leading zeros</value>
        [DataMember(Name="counter_padding", EmitDefaultValue=false)]
        public int? CounterPadding { get; set; }

        /// <summary>
        /// Flags whether to share the counter for invoices and quotes
        /// </summary>
        /// <value>Flags whether to share the counter for invoices and quotes</value>
        [DataMember(Name="shared_invoice_quote_counter", EmitDefaultValue=false)]
        public bool? SharedInvoiceQuoteCounter { get; set; }

        /// <summary>
        /// Determines if client fields are updated from third party APIs
        /// </summary>
        /// <value>Determines if client fields are updated from third party APIs</value>
        [DataMember(Name="update_products", EmitDefaultValue=false)]
        public bool? UpdateProducts { get; set; }

        /// <summary>
        /// Gets or Sets ConvertProducts
        /// </summary>
        [DataMember(Name="convert_products", EmitDefaultValue=false)]
        public bool? ConvertProducts { get; set; }

        /// <summary>
        /// Automatically fill products based on product_key
        /// </summary>
        /// <value>Automatically fill products based on product_key</value>
        [DataMember(Name="fill_products", EmitDefaultValue=false)]
        public bool? FillProducts { get; set; }

        /// <summary>
        /// The default invoice terms
        /// </summary>
        /// <value>The default invoice terms</value>
        [DataMember(Name="invoice_terms", EmitDefaultValue=false)]
        public string InvoiceTerms { get; set; }

        /// <summary>
        /// The default quote terms
        /// </summary>
        /// <value>The default quote terms</value>
        [DataMember(Name="quote_terms", EmitDefaultValue=false)]
        public string QuoteTerms { get; set; }

        /// <summary>
        /// Taxes can be applied to the invoice
        /// </summary>
        /// <value>Taxes can be applied to the invoice</value>
        [DataMember(Name="invoice_taxes", EmitDefaultValue=false)]
        public decimal? InvoiceTaxes { get; set; }

        /// <summary>
        /// The default design id (invoice, quote etc)
        /// </summary>
        /// <value>The default design id (invoice, quote etc)</value>
        [DataMember(Name="invoice_design_id", EmitDefaultValue=false)]
        public string InvoiceDesignId { get; set; }

        /// <summary>
        /// The default design id (invoice, quote etc)
        /// </summary>
        /// <value>The default design id (invoice, quote etc)</value>
        [DataMember(Name="quote_design_id", EmitDefaultValue=false)]
        public string QuoteDesignId { get; set; }

        /// <summary>
        /// The default invoice footer
        /// </summary>
        /// <value>The default invoice footer</value>
        [DataMember(Name="invoice_footer", EmitDefaultValue=false)]
        public string InvoiceFooter { get; set; }

        /// <summary>
        /// JSON string of invoice labels
        /// </summary>
        /// <value>JSON string of invoice labels</value>
        [DataMember(Name="invoice_labels", EmitDefaultValue=false)]
        public string InvoiceLabels { get; set; }

        /// <summary>
        /// The tax rate (float)
        /// </summary>
        /// <value>The tax rate (float)</value>
        [DataMember(Name="tax_rate1", EmitDefaultValue=false)]
        public decimal? TaxRate1 { get; set; }

        /// <summary>
        /// The tax name
        /// </summary>
        /// <value>The tax name</value>
        [DataMember(Name="tax_name1", EmitDefaultValue=false)]
        public string TaxName1 { get; set; }

        /// <summary>
        /// The tax rate (float)
        /// </summary>
        /// <value>The tax rate (float)</value>
        [DataMember(Name="tax_rate2", EmitDefaultValue=false)]
        public decimal? TaxRate2 { get; set; }

        /// <summary>
        /// The tax name
        /// </summary>
        /// <value>The tax name</value>
        [DataMember(Name="tax_name2", EmitDefaultValue=false)]
        public string TaxName2 { get; set; }

        /// <summary>
        /// The tax rate (float)
        /// </summary>
        /// <value>The tax rate (float)</value>
        [DataMember(Name="tax_rate3", EmitDefaultValue=false)]
        public decimal? TaxRate3 { get; set; }

        /// <summary>
        /// The tax name
        /// </summary>
        /// <value>The tax name</value>
        [DataMember(Name="tax_name3", EmitDefaultValue=false)]
        public string TaxName3 { get; set; }

        /// <summary>
        /// The default payment type id
        /// </summary>
        /// <value>The default payment type id</value>
        [DataMember(Name="payment_type_id", EmitDefaultValue=false)]
        public string PaymentTypeId { get; set; }

        /// <summary>
        /// JSON string of custom fields
        /// </summary>
        /// <value>JSON string of custom fields</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public string CustomFields { get; set; }

        /// <summary>
        /// The default email footer
        /// </summary>
        /// <value>The default email footer</value>
        [DataMember(Name="email_footer", EmitDefaultValue=false)]
        public string EmailFooter { get; set; }

        /// <summary>
        /// The email driver to use to send email, options include default, gmail
        /// </summary>
        /// <value>The email driver to use to send email, options include default, gmail</value>
        [DataMember(Name="email_sending_method", EmitDefaultValue=false)]
        public string EmailSendingMethod { get; set; }

        /// <summary>
        /// The hashed_id of the user account to send email from
        /// </summary>
        /// <value>The hashed_id of the user account to send email from</value>
        [DataMember(Name="gmail_sending_user_id", EmitDefaultValue=false)]
        public string GmailSendingUserId { get; set; }

        /// <summary>
        /// Gets or Sets EmailSubjectInvoice
        /// </summary>
        [DataMember(Name="email_subject_invoice", EmitDefaultValue=false)]
        public string EmailSubjectInvoice { get; set; }

        /// <summary>
        /// Gets or Sets EmailSubjectQuote
        /// </summary>
        [DataMember(Name="email_subject_quote", EmitDefaultValue=false)]
        public string EmailSubjectQuote { get; set; }

        /// <summary>
        /// Gets or Sets EmailSubjectPayment
        /// </summary>
        [DataMember(Name="email_subject_payment", EmitDefaultValue=false)]
        public string EmailSubjectPayment { get; set; }

        /// <summary>
        /// The full template for invoice emails
        /// </summary>
        /// <value>The full template for invoice emails</value>
        [DataMember(Name="email_template_invoice", EmitDefaultValue=false)]
        public string EmailTemplateInvoice { get; set; }

        /// <summary>
        /// The full template for quote emails
        /// </summary>
        /// <value>The full template for quote emails</value>
        [DataMember(Name="email_template_quote", EmitDefaultValue=false)]
        public string EmailTemplateQuote { get; set; }

        /// <summary>
        /// The full template for payment emails
        /// </summary>
        /// <value>The full template for payment emails</value>
        [DataMember(Name="email_template_payment", EmitDefaultValue=false)]
        public string EmailTemplatePayment { get; set; }

        /// <summary>
        /// Email subject for Reminder
        /// </summary>
        /// <value>Email subject for Reminder</value>
        [DataMember(Name="email_subject_reminder1", EmitDefaultValue=false)]
        public string EmailSubjectReminder1 { get; set; }

        /// <summary>
        /// Email subject for Reminder
        /// </summary>
        /// <value>Email subject for Reminder</value>
        [DataMember(Name="email_subject_reminder2", EmitDefaultValue=false)]
        public string EmailSubjectReminder2 { get; set; }

        /// <summary>
        /// Email subject for Reminder
        /// </summary>
        /// <value>Email subject for Reminder</value>
        [DataMember(Name="email_subject_reminder3", EmitDefaultValue=false)]
        public string EmailSubjectReminder3 { get; set; }

        /// <summary>
        /// Email subject for endless reminders
        /// </summary>
        /// <value>Email subject for endless reminders</value>
        [DataMember(Name="email_subject_reminder_endless", EmitDefaultValue=false)]
        public string EmailSubjectReminderEndless { get; set; }

        /// <summary>
        /// The full template for Reminder 1
        /// </summary>
        /// <value>The full template for Reminder 1</value>
        [DataMember(Name="email_template_reminder1", EmitDefaultValue=false)]
        public string EmailTemplateReminder1 { get; set; }

        /// <summary>
        /// The full template for Reminder 2
        /// </summary>
        /// <value>The full template for Reminder 2</value>
        [DataMember(Name="email_template_reminder2", EmitDefaultValue=false)]
        public string EmailTemplateReminder2 { get; set; }

        /// <summary>
        /// The full template for Reminder 3
        /// </summary>
        /// <value>The full template for Reminder 3</value>
        [DataMember(Name="email_template_reminder3", EmitDefaultValue=false)]
        public string EmailTemplateReminder3 { get; set; }

        /// <summary>
        /// The full template for enless reminders
        /// </summary>
        /// <value>The full template for enless reminders</value>
        [DataMember(Name="email_template_reminder_endless", EmitDefaultValue=false)]
        public string EmailTemplateReminderEndless { get; set; }

        /// <summary>
        /// Toggles whether a password is required to log into the client portal
        /// </summary>
        /// <value>Toggles whether a password is required to log into the client portal</value>
        [DataMember(Name="enable_portal_password", EmitDefaultValue=false)]
        public bool? EnablePortalPassword { get; set; }

        /// <summary>
        /// Toggles whether the terms dialogue is shown to the client
        /// </summary>
        /// <value>Toggles whether the terms dialogue is shown to the client</value>
        [DataMember(Name="show_accept_invoice_terms", EmitDefaultValue=false)]
        public bool? ShowAcceptInvoiceTerms { get; set; }

        /// <summary>
        /// Toggles whether the terms dialogue is shown to the client
        /// </summary>
        /// <value>Toggles whether the terms dialogue is shown to the client</value>
        [DataMember(Name="show_accept_quote_terms", EmitDefaultValue=false)]
        public bool? ShowAcceptQuoteTerms { get; set; }

        /// <summary>
        /// Toggles whether a invoice signature is required
        /// </summary>
        /// <value>Toggles whether a invoice signature is required</value>
        [DataMember(Name="require_invoice_signature", EmitDefaultValue=false)]
        public bool? RequireInvoiceSignature { get; set; }

        /// <summary>
        /// Toggles whether a quote signature is required
        /// </summary>
        /// <value>Toggles whether a quote signature is required</value>
        [DataMember(Name="require_quote_signature", EmitDefaultValue=false)]
        public bool? RequireQuoteSignature { get; set; }

        /// <summary>
        /// The company name
        /// </summary>
        /// <value>The company name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The company logo file
        /// </summary>
        /// <value>The company logo file</value>
        [DataMember(Name="company_logo", EmitDefaultValue=false)]
        public Object CompanyLogo { get; set; }

        /// <summary>
        /// The company website URL
        /// </summary>
        /// <value>The company website URL</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The country ID
        /// </summary>
        /// <value>The country ID</value>
        [DataMember(Name="country_id", EmitDefaultValue=false)]
        public string CountryId { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="vat_number", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// The default page size
        /// </summary>
        /// <value>The default page size</value>
        [DataMember(Name="page_size", EmitDefaultValue=false)]
        public string PageSize { get; set; }

        /// <summary>
        /// The font size
        /// </summary>
        /// <value>The font size</value>
        [DataMember(Name="font_size", EmitDefaultValue=false)]
        public decimal? FontSize { get; set; }

        /// <summary>
        /// The primary font
        /// </summary>
        /// <value>The primary font</value>
        [DataMember(Name="primary_font", EmitDefaultValue=false)]
        public string PrimaryFont { get; set; }

        /// <summary>
        /// The secondary font
        /// </summary>
        /// <value>The secondary font</value>
        [DataMember(Name="secondary_font", EmitDefaultValue=false)]
        public string SecondaryFont { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="hide_paid_to_date", EmitDefaultValue=false)]
        public bool? HidePaidToDate { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="embed_documents", EmitDefaultValue=false)]
        public bool? EmbedDocuments { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="all_pages_header", EmitDefaultValue=false)]
        public bool? AllPagesHeader { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="all_pages_footer", EmitDefaultValue=false)]
        public bool? AllPagesFooter { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="document_email_attachment", EmitDefaultValue=false)]
        public bool? DocumentEmailAttachment { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_client_portal_password", EmitDefaultValue=false)]
        public bool? EnableClientPortalPassword { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_email_markup", EmitDefaultValue=false)]
        public bool? EnableEmailMarkup { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_client_portal_dashboard", EmitDefaultValue=false)]
        public bool? EnableClientPortalDashboard { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_client_portal", EmitDefaultValue=false)]
        public bool? EnableClientPortal { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_template_statement", EmitDefaultValue=false)]
        public string EmailTemplateStatement { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_subject_statement", EmitDefaultValue=false)]
        public string EmailSubjectStatement { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="signature_on_pdf", EmitDefaultValue=false)]
        public bool? SignatureOnPdf { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="quote_footer", EmitDefaultValue=false)]
        public string QuoteFooter { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_subject_custom1", EmitDefaultValue=false)]
        public string EmailSubjectCustom1 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_subject_custom2", EmitDefaultValue=false)]
        public string EmailSubjectCustom2 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_subject_custom3", EmitDefaultValue=false)]
        public string EmailSubjectCustom3 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_template_custom1", EmitDefaultValue=false)]
        public string EmailTemplateCustom1 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_template_custom2", EmitDefaultValue=false)]
        public string EmailTemplateCustom2 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="email_template_custom3", EmitDefaultValue=false)]
        public string EmailTemplateCustom3 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_reminder1", EmitDefaultValue=false)]
        public bool? EnableReminder1 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_reminder2", EmitDefaultValue=false)]
        public bool? EnableReminder2 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="enable_reminder3", EmitDefaultValue=false)]
        public bool? EnableReminder3 { get; set; }

        /// <summary>
        /// The Reminder interval
        /// </summary>
        /// <value>The Reminder interval</value>
        [DataMember(Name="num_days_reminder1", EmitDefaultValue=false)]
        public decimal? NumDaysReminder1 { get; set; }

        /// <summary>
        /// The Reminder interval
        /// </summary>
        /// <value>The Reminder interval</value>
        [DataMember(Name="num_days_reminder2", EmitDefaultValue=false)]
        public decimal? NumDaysReminder2 { get; set; }

        /// <summary>
        /// The Reminder interval
        /// </summary>
        /// <value>The Reminder interval</value>
        [DataMember(Name="num_days_reminder3", EmitDefaultValue=false)]
        public decimal? NumDaysReminder3 { get; set; }

        /// <summary>
        /// (enum: after_invoice_date, before_due_date, after_due_date)
        /// </summary>
        /// <value>(enum: after_invoice_date, before_due_date, after_due_date)</value>
        [DataMember(Name="schedule_reminder1", EmitDefaultValue=false)]
        public string ScheduleReminder1 { get; set; }

        /// <summary>
        /// (enum: after_invoice_date, before_due_date, after_due_date)
        /// </summary>
        /// <value>(enum: after_invoice_date, before_due_date, after_due_date)</value>
        [DataMember(Name="schedule_reminder2", EmitDefaultValue=false)]
        public string ScheduleReminder2 { get; set; }

        /// <summary>
        /// (enum: after_invoice_date, before_due_date, after_due_date)
        /// </summary>
        /// <value>(enum: after_invoice_date, before_due_date, after_due_date)</value>
        [DataMember(Name="schedule_reminder3", EmitDefaultValue=false)]
        public string ScheduleReminder3 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="late_fee_amount1", EmitDefaultValue=false)]
        public decimal? LateFeeAmount1 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="late_fee_amount2", EmitDefaultValue=false)]
        public decimal? LateFeeAmount2 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="late_fee_amount3", EmitDefaultValue=false)]
        public decimal? LateFeeAmount3 { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="endless_reminder_frequency_id", EmitDefaultValue=false)]
        public string EndlessReminderFrequencyId { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="client_online_payment_notification", EmitDefaultValue=false)]
        public bool? ClientOnlinePaymentNotification { get; set; }

        /// <summary>
        /// ____________
        /// </summary>
        /// <value>____________</value>
        [DataMember(Name="client_manual_payment_notification", EmitDefaultValue=false)]
        public bool? ClientManualPaymentNotification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanySettings {\n");
            sb.Append("  TimezoneId: ").Append(TimezoneId).Append("\n");
            sb.Append("  DateFormatId: ").Append(DateFormatId).Append("\n");
            sb.Append("  MilitaryTime: ").Append(MilitaryTime).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  ShowCurrencyCode: ").Append(ShowCurrencyCode).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  CompanyGatewayIds: ").Append(CompanyGatewayIds).Append("\n");
            sb.Append("  CustomValue1: ").Append(CustomValue1).Append("\n");
            sb.Append("  CustomValue2: ").Append(CustomValue2).Append("\n");
            sb.Append("  CustomValue3: ").Append(CustomValue3).Append("\n");
            sb.Append("  CustomValue4: ").Append(CustomValue4).Append("\n");
            sb.Append("  DefaultTaskRate: ").Append(DefaultTaskRate).Append("\n");
            sb.Append("  SendReminders: ").Append(SendReminders).Append("\n");
            sb.Append("  EnableClientPortalTasks: ").Append(EnableClientPortalTasks).Append("\n");
            sb.Append("  EmailStyle: ").Append(EmailStyle).Append("\n");
            sb.Append("  ReplyToEmail: ").Append(ReplyToEmail).Append("\n");
            sb.Append("  BccEmail: ").Append(BccEmail).Append("\n");
            sb.Append("  PdfEmailAttachment: ").Append(PdfEmailAttachment).Append("\n");
            sb.Append("  UblEmailAttachment: ").Append(UblEmailAttachment).Append("\n");
            sb.Append("  EmailStyleCustom: ").Append(EmailStyleCustom).Append("\n");
            sb.Append("  CounterNumberApplied: ").Append(CounterNumberApplied).Append("\n");
            sb.Append("  QuoteNumberApplied: ").Append(QuoteNumberApplied).Append("\n");
            sb.Append("  CustomMessageDashboard: ").Append(CustomMessageDashboard).Append("\n");
            sb.Append("  CustomMessageUnpaidInvoice: ").Append(CustomMessageUnpaidInvoice).Append("\n");
            sb.Append("  CustomMessagePaidInvoice: ").Append(CustomMessagePaidInvoice).Append("\n");
            sb.Append("  CustomMessageUnapprovedQuote: ").Append(CustomMessageUnapprovedQuote).Append("\n");
            sb.Append("  LockInvoices: ").Append(LockInvoices).Append("\n");
            sb.Append("  AutoArchiveInvoice: ").Append(AutoArchiveInvoice).Append("\n");
            sb.Append("  AutoArchiveQuote: ").Append(AutoArchiveQuote).Append("\n");
            sb.Append("  AutoConvertQuote: ").Append(AutoConvertQuote).Append("\n");
            sb.Append("  InclusiveTaxes: ").Append(InclusiveTaxes).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  TaskNumberPattern: ").Append(TaskNumberPattern).Append("\n");
            sb.Append("  TaskNumberCounter: ").Append(TaskNumberCounter).Append("\n");
            sb.Append("  ReminderSendTime: ").Append(ReminderSendTime).Append("\n");
            sb.Append("  ExpenseNumberPattern: ").Append(ExpenseNumberPattern).Append("\n");
            sb.Append("  ExpenseNumberCounter: ").Append(ExpenseNumberCounter).Append("\n");
            sb.Append("  VendorNumberPattern: ").Append(VendorNumberPattern).Append("\n");
            sb.Append("  VendorNumberCounter: ").Append(VendorNumberCounter).Append("\n");
            sb.Append("  TicketNumberPattern: ").Append(TicketNumberPattern).Append("\n");
            sb.Append("  TicketNumberCounter: ").Append(TicketNumberCounter).Append("\n");
            sb.Append("  PaymentNumberPattern: ").Append(PaymentNumberPattern).Append("\n");
            sb.Append("  PaymentNumberCounter: ").Append(PaymentNumberCounter).Append("\n");
            sb.Append("  InvoiceNumberPattern: ").Append(InvoiceNumberPattern).Append("\n");
            sb.Append("  InvoiceNumberCounter: ").Append(InvoiceNumberCounter).Append("\n");
            sb.Append("  QuoteNumberPattern: ").Append(QuoteNumberPattern).Append("\n");
            sb.Append("  QuoteNumberCounter: ").Append(QuoteNumberCounter).Append("\n");
            sb.Append("  ClientNumberPattern: ").Append(ClientNumberPattern).Append("\n");
            sb.Append("  ClientNumberCounter: ").Append(ClientNumberCounter).Append("\n");
            sb.Append("  CreditNumberPattern: ").Append(CreditNumberPattern).Append("\n");
            sb.Append("  CreditNumberCounter: ").Append(CreditNumberCounter).Append("\n");
            sb.Append("  RecurringInvoiceNumberPrefix: ").Append(RecurringInvoiceNumberPrefix).Append("\n");
            sb.Append("  ResetCounterFrequencyId: ").Append(ResetCounterFrequencyId).Append("\n");
            sb.Append("  ResetCounterDate: ").Append(ResetCounterDate).Append("\n");
            sb.Append("  CounterPadding: ").Append(CounterPadding).Append("\n");
            sb.Append("  SharedInvoiceQuoteCounter: ").Append(SharedInvoiceQuoteCounter).Append("\n");
            sb.Append("  UpdateProducts: ").Append(UpdateProducts).Append("\n");
            sb.Append("  ConvertProducts: ").Append(ConvertProducts).Append("\n");
            sb.Append("  FillProducts: ").Append(FillProducts).Append("\n");
            sb.Append("  InvoiceTerms: ").Append(InvoiceTerms).Append("\n");
            sb.Append("  QuoteTerms: ").Append(QuoteTerms).Append("\n");
            sb.Append("  InvoiceTaxes: ").Append(InvoiceTaxes).Append("\n");
            sb.Append("  InvoiceDesignId: ").Append(InvoiceDesignId).Append("\n");
            sb.Append("  QuoteDesignId: ").Append(QuoteDesignId).Append("\n");
            sb.Append("  InvoiceFooter: ").Append(InvoiceFooter).Append("\n");
            sb.Append("  InvoiceLabels: ").Append(InvoiceLabels).Append("\n");
            sb.Append("  TaxRate1: ").Append(TaxRate1).Append("\n");
            sb.Append("  TaxName1: ").Append(TaxName1).Append("\n");
            sb.Append("  TaxRate2: ").Append(TaxRate2).Append("\n");
            sb.Append("  TaxName2: ").Append(TaxName2).Append("\n");
            sb.Append("  TaxRate3: ").Append(TaxRate3).Append("\n");
            sb.Append("  TaxName3: ").Append(TaxName3).Append("\n");
            sb.Append("  PaymentTypeId: ").Append(PaymentTypeId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  EmailFooter: ").Append(EmailFooter).Append("\n");
            sb.Append("  EmailSendingMethod: ").Append(EmailSendingMethod).Append("\n");
            sb.Append("  GmailSendingUserId: ").Append(GmailSendingUserId).Append("\n");
            sb.Append("  EmailSubjectInvoice: ").Append(EmailSubjectInvoice).Append("\n");
            sb.Append("  EmailSubjectQuote: ").Append(EmailSubjectQuote).Append("\n");
            sb.Append("  EmailSubjectPayment: ").Append(EmailSubjectPayment).Append("\n");
            sb.Append("  EmailTemplateInvoice: ").Append(EmailTemplateInvoice).Append("\n");
            sb.Append("  EmailTemplateQuote: ").Append(EmailTemplateQuote).Append("\n");
            sb.Append("  EmailTemplatePayment: ").Append(EmailTemplatePayment).Append("\n");
            sb.Append("  EmailSubjectReminder1: ").Append(EmailSubjectReminder1).Append("\n");
            sb.Append("  EmailSubjectReminder2: ").Append(EmailSubjectReminder2).Append("\n");
            sb.Append("  EmailSubjectReminder3: ").Append(EmailSubjectReminder3).Append("\n");
            sb.Append("  EmailSubjectReminderEndless: ").Append(EmailSubjectReminderEndless).Append("\n");
            sb.Append("  EmailTemplateReminder1: ").Append(EmailTemplateReminder1).Append("\n");
            sb.Append("  EmailTemplateReminder2: ").Append(EmailTemplateReminder2).Append("\n");
            sb.Append("  EmailTemplateReminder3: ").Append(EmailTemplateReminder3).Append("\n");
            sb.Append("  EmailTemplateReminderEndless: ").Append(EmailTemplateReminderEndless).Append("\n");
            sb.Append("  EnablePortalPassword: ").Append(EnablePortalPassword).Append("\n");
            sb.Append("  ShowAcceptInvoiceTerms: ").Append(ShowAcceptInvoiceTerms).Append("\n");
            sb.Append("  ShowAcceptQuoteTerms: ").Append(ShowAcceptQuoteTerms).Append("\n");
            sb.Append("  RequireInvoiceSignature: ").Append(RequireInvoiceSignature).Append("\n");
            sb.Append("  RequireQuoteSignature: ").Append(RequireQuoteSignature).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CompanyLogo: ").Append(CompanyLogo).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  PrimaryFont: ").Append(PrimaryFont).Append("\n");
            sb.Append("  SecondaryFont: ").Append(SecondaryFont).Append("\n");
            sb.Append("  HidePaidToDate: ").Append(HidePaidToDate).Append("\n");
            sb.Append("  EmbedDocuments: ").Append(EmbedDocuments).Append("\n");
            sb.Append("  AllPagesHeader: ").Append(AllPagesHeader).Append("\n");
            sb.Append("  AllPagesFooter: ").Append(AllPagesFooter).Append("\n");
            sb.Append("  DocumentEmailAttachment: ").Append(DocumentEmailAttachment).Append("\n");
            sb.Append("  EnableClientPortalPassword: ").Append(EnableClientPortalPassword).Append("\n");
            sb.Append("  EnableEmailMarkup: ").Append(EnableEmailMarkup).Append("\n");
            sb.Append("  EnableClientPortalDashboard: ").Append(EnableClientPortalDashboard).Append("\n");
            sb.Append("  EnableClientPortal: ").Append(EnableClientPortal).Append("\n");
            sb.Append("  EmailTemplateStatement: ").Append(EmailTemplateStatement).Append("\n");
            sb.Append("  EmailSubjectStatement: ").Append(EmailSubjectStatement).Append("\n");
            sb.Append("  SignatureOnPdf: ").Append(SignatureOnPdf).Append("\n");
            sb.Append("  QuoteFooter: ").Append(QuoteFooter).Append("\n");
            sb.Append("  EmailSubjectCustom1: ").Append(EmailSubjectCustom1).Append("\n");
            sb.Append("  EmailSubjectCustom2: ").Append(EmailSubjectCustom2).Append("\n");
            sb.Append("  EmailSubjectCustom3: ").Append(EmailSubjectCustom3).Append("\n");
            sb.Append("  EmailTemplateCustom1: ").Append(EmailTemplateCustom1).Append("\n");
            sb.Append("  EmailTemplateCustom2: ").Append(EmailTemplateCustom2).Append("\n");
            sb.Append("  EmailTemplateCustom3: ").Append(EmailTemplateCustom3).Append("\n");
            sb.Append("  EnableReminder1: ").Append(EnableReminder1).Append("\n");
            sb.Append("  EnableReminder2: ").Append(EnableReminder2).Append("\n");
            sb.Append("  EnableReminder3: ").Append(EnableReminder3).Append("\n");
            sb.Append("  NumDaysReminder1: ").Append(NumDaysReminder1).Append("\n");
            sb.Append("  NumDaysReminder2: ").Append(NumDaysReminder2).Append("\n");
            sb.Append("  NumDaysReminder3: ").Append(NumDaysReminder3).Append("\n");
            sb.Append("  ScheduleReminder1: ").Append(ScheduleReminder1).Append("\n");
            sb.Append("  ScheduleReminder2: ").Append(ScheduleReminder2).Append("\n");
            sb.Append("  ScheduleReminder3: ").Append(ScheduleReminder3).Append("\n");
            sb.Append("  LateFeeAmount1: ").Append(LateFeeAmount1).Append("\n");
            sb.Append("  LateFeeAmount2: ").Append(LateFeeAmount2).Append("\n");
            sb.Append("  LateFeeAmount3: ").Append(LateFeeAmount3).Append("\n");
            sb.Append("  EndlessReminderFrequencyId: ").Append(EndlessReminderFrequencyId).Append("\n");
            sb.Append("  ClientOnlinePaymentNotification: ").Append(ClientOnlinePaymentNotification).Append("\n");
            sb.Append("  ClientManualPaymentNotification: ").Append(ClientManualPaymentNotification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanySettings);
        }

        /// <summary>
        /// Returns true if CompanySettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanySettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimezoneId == input.TimezoneId ||
                    (this.TimezoneId != null &&
                    this.TimezoneId.Equals(input.TimezoneId))
                ) && 
                (
                    this.DateFormatId == input.DateFormatId ||
                    (this.DateFormatId != null &&
                    this.DateFormatId.Equals(input.DateFormatId))
                ) && 
                (
                    this.MilitaryTime == input.MilitaryTime ||
                    (this.MilitaryTime != null &&
                    this.MilitaryTime.Equals(input.MilitaryTime))
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.ShowCurrencyCode == input.ShowCurrencyCode ||
                    (this.ShowCurrencyCode != null &&
                    this.ShowCurrencyCode.Equals(input.ShowCurrencyCode))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.PaymentTerms == input.PaymentTerms ||
                    (this.PaymentTerms != null &&
                    this.PaymentTerms.Equals(input.PaymentTerms))
                ) && 
                (
                    this.CompanyGatewayIds == input.CompanyGatewayIds ||
                    (this.CompanyGatewayIds != null &&
                    this.CompanyGatewayIds.Equals(input.CompanyGatewayIds))
                ) && 
                (
                    this.CustomValue1 == input.CustomValue1 ||
                    (this.CustomValue1 != null &&
                    this.CustomValue1.Equals(input.CustomValue1))
                ) && 
                (
                    this.CustomValue2 == input.CustomValue2 ||
                    (this.CustomValue2 != null &&
                    this.CustomValue2.Equals(input.CustomValue2))
                ) && 
                (
                    this.CustomValue3 == input.CustomValue3 ||
                    (this.CustomValue3 != null &&
                    this.CustomValue3.Equals(input.CustomValue3))
                ) && 
                (
                    this.CustomValue4 == input.CustomValue4 ||
                    (this.CustomValue4 != null &&
                    this.CustomValue4.Equals(input.CustomValue4))
                ) && 
                (
                    this.DefaultTaskRate == input.DefaultTaskRate ||
                    (this.DefaultTaskRate != null &&
                    this.DefaultTaskRate.Equals(input.DefaultTaskRate))
                ) && 
                (
                    this.SendReminders == input.SendReminders ||
                    (this.SendReminders != null &&
                    this.SendReminders.Equals(input.SendReminders))
                ) && 
                (
                    this.EnableClientPortalTasks == input.EnableClientPortalTasks ||
                    (this.EnableClientPortalTasks != null &&
                    this.EnableClientPortalTasks.Equals(input.EnableClientPortalTasks))
                ) && 
                (
                    this.EmailStyle == input.EmailStyle ||
                    (this.EmailStyle != null &&
                    this.EmailStyle.Equals(input.EmailStyle))
                ) && 
                (
                    this.ReplyToEmail == input.ReplyToEmail ||
                    (this.ReplyToEmail != null &&
                    this.ReplyToEmail.Equals(input.ReplyToEmail))
                ) && 
                (
                    this.BccEmail == input.BccEmail ||
                    (this.BccEmail != null &&
                    this.BccEmail.Equals(input.BccEmail))
                ) && 
                (
                    this.PdfEmailAttachment == input.PdfEmailAttachment ||
                    (this.PdfEmailAttachment != null &&
                    this.PdfEmailAttachment.Equals(input.PdfEmailAttachment))
                ) && 
                (
                    this.UblEmailAttachment == input.UblEmailAttachment ||
                    (this.UblEmailAttachment != null &&
                    this.UblEmailAttachment.Equals(input.UblEmailAttachment))
                ) && 
                (
                    this.EmailStyleCustom == input.EmailStyleCustom ||
                    (this.EmailStyleCustom != null &&
                    this.EmailStyleCustom.Equals(input.EmailStyleCustom))
                ) && 
                (
                    this.CounterNumberApplied == input.CounterNumberApplied ||
                    (this.CounterNumberApplied != null &&
                    this.CounterNumberApplied.Equals(input.CounterNumberApplied))
                ) && 
                (
                    this.QuoteNumberApplied == input.QuoteNumberApplied ||
                    (this.QuoteNumberApplied != null &&
                    this.QuoteNumberApplied.Equals(input.QuoteNumberApplied))
                ) && 
                (
                    this.CustomMessageDashboard == input.CustomMessageDashboard ||
                    (this.CustomMessageDashboard != null &&
                    this.CustomMessageDashboard.Equals(input.CustomMessageDashboard))
                ) && 
                (
                    this.CustomMessageUnpaidInvoice == input.CustomMessageUnpaidInvoice ||
                    (this.CustomMessageUnpaidInvoice != null &&
                    this.CustomMessageUnpaidInvoice.Equals(input.CustomMessageUnpaidInvoice))
                ) && 
                (
                    this.CustomMessagePaidInvoice == input.CustomMessagePaidInvoice ||
                    (this.CustomMessagePaidInvoice != null &&
                    this.CustomMessagePaidInvoice.Equals(input.CustomMessagePaidInvoice))
                ) && 
                (
                    this.CustomMessageUnapprovedQuote == input.CustomMessageUnapprovedQuote ||
                    (this.CustomMessageUnapprovedQuote != null &&
                    this.CustomMessageUnapprovedQuote.Equals(input.CustomMessageUnapprovedQuote))
                ) && 
                (
                    this.LockInvoices == input.LockInvoices ||
                    (this.LockInvoices != null &&
                    this.LockInvoices.Equals(input.LockInvoices))
                ) && 
                (
                    this.AutoArchiveInvoice == input.AutoArchiveInvoice ||
                    (this.AutoArchiveInvoice != null &&
                    this.AutoArchiveInvoice.Equals(input.AutoArchiveInvoice))
                ) && 
                (
                    this.AutoArchiveQuote == input.AutoArchiveQuote ||
                    (this.AutoArchiveQuote != null &&
                    this.AutoArchiveQuote.Equals(input.AutoArchiveQuote))
                ) && 
                (
                    this.AutoConvertQuote == input.AutoConvertQuote ||
                    (this.AutoConvertQuote != null &&
                    this.AutoConvertQuote.Equals(input.AutoConvertQuote))
                ) && 
                (
                    this.InclusiveTaxes == input.InclusiveTaxes ||
                    (this.InclusiveTaxes != null &&
                    this.InclusiveTaxes.Equals(input.InclusiveTaxes))
                ) && 
                (
                    this.Translations == input.Translations ||
                    (this.Translations != null &&
                    this.Translations.Equals(input.Translations))
                ) && 
                (
                    this.TaskNumberPattern == input.TaskNumberPattern ||
                    (this.TaskNumberPattern != null &&
                    this.TaskNumberPattern.Equals(input.TaskNumberPattern))
                ) && 
                (
                    this.TaskNumberCounter == input.TaskNumberCounter ||
                    (this.TaskNumberCounter != null &&
                    this.TaskNumberCounter.Equals(input.TaskNumberCounter))
                ) && 
                (
                    this.ReminderSendTime == input.ReminderSendTime ||
                    (this.ReminderSendTime != null &&
                    this.ReminderSendTime.Equals(input.ReminderSendTime))
                ) && 
                (
                    this.ExpenseNumberPattern == input.ExpenseNumberPattern ||
                    (this.ExpenseNumberPattern != null &&
                    this.ExpenseNumberPattern.Equals(input.ExpenseNumberPattern))
                ) && 
                (
                    this.ExpenseNumberCounter == input.ExpenseNumberCounter ||
                    (this.ExpenseNumberCounter != null &&
                    this.ExpenseNumberCounter.Equals(input.ExpenseNumberCounter))
                ) && 
                (
                    this.VendorNumberPattern == input.VendorNumberPattern ||
                    (this.VendorNumberPattern != null &&
                    this.VendorNumberPattern.Equals(input.VendorNumberPattern))
                ) && 
                (
                    this.VendorNumberCounter == input.VendorNumberCounter ||
                    (this.VendorNumberCounter != null &&
                    this.VendorNumberCounter.Equals(input.VendorNumberCounter))
                ) && 
                (
                    this.TicketNumberPattern == input.TicketNumberPattern ||
                    (this.TicketNumberPattern != null &&
                    this.TicketNumberPattern.Equals(input.TicketNumberPattern))
                ) && 
                (
                    this.TicketNumberCounter == input.TicketNumberCounter ||
                    (this.TicketNumberCounter != null &&
                    this.TicketNumberCounter.Equals(input.TicketNumberCounter))
                ) && 
                (
                    this.PaymentNumberPattern == input.PaymentNumberPattern ||
                    (this.PaymentNumberPattern != null &&
                    this.PaymentNumberPattern.Equals(input.PaymentNumberPattern))
                ) && 
                (
                    this.PaymentNumberCounter == input.PaymentNumberCounter ||
                    (this.PaymentNumberCounter != null &&
                    this.PaymentNumberCounter.Equals(input.PaymentNumberCounter))
                ) && 
                (
                    this.InvoiceNumberPattern == input.InvoiceNumberPattern ||
                    (this.InvoiceNumberPattern != null &&
                    this.InvoiceNumberPattern.Equals(input.InvoiceNumberPattern))
                ) && 
                (
                    this.InvoiceNumberCounter == input.InvoiceNumberCounter ||
                    (this.InvoiceNumberCounter != null &&
                    this.InvoiceNumberCounter.Equals(input.InvoiceNumberCounter))
                ) && 
                (
                    this.QuoteNumberPattern == input.QuoteNumberPattern ||
                    (this.QuoteNumberPattern != null &&
                    this.QuoteNumberPattern.Equals(input.QuoteNumberPattern))
                ) && 
                (
                    this.QuoteNumberCounter == input.QuoteNumberCounter ||
                    (this.QuoteNumberCounter != null &&
                    this.QuoteNumberCounter.Equals(input.QuoteNumberCounter))
                ) && 
                (
                    this.ClientNumberPattern == input.ClientNumberPattern ||
                    (this.ClientNumberPattern != null &&
                    this.ClientNumberPattern.Equals(input.ClientNumberPattern))
                ) && 
                (
                    this.ClientNumberCounter == input.ClientNumberCounter ||
                    (this.ClientNumberCounter != null &&
                    this.ClientNumberCounter.Equals(input.ClientNumberCounter))
                ) && 
                (
                    this.CreditNumberPattern == input.CreditNumberPattern ||
                    (this.CreditNumberPattern != null &&
                    this.CreditNumberPattern.Equals(input.CreditNumberPattern))
                ) && 
                (
                    this.CreditNumberCounter == input.CreditNumberCounter ||
                    (this.CreditNumberCounter != null &&
                    this.CreditNumberCounter.Equals(input.CreditNumberCounter))
                ) && 
                (
                    this.RecurringInvoiceNumberPrefix == input.RecurringInvoiceNumberPrefix ||
                    (this.RecurringInvoiceNumberPrefix != null &&
                    this.RecurringInvoiceNumberPrefix.Equals(input.RecurringInvoiceNumberPrefix))
                ) && 
                (
                    this.ResetCounterFrequencyId == input.ResetCounterFrequencyId ||
                    (this.ResetCounterFrequencyId != null &&
                    this.ResetCounterFrequencyId.Equals(input.ResetCounterFrequencyId))
                ) && 
                (
                    this.ResetCounterDate == input.ResetCounterDate ||
                    (this.ResetCounterDate != null &&
                    this.ResetCounterDate.Equals(input.ResetCounterDate))
                ) && 
                (
                    this.CounterPadding == input.CounterPadding ||
                    (this.CounterPadding != null &&
                    this.CounterPadding.Equals(input.CounterPadding))
                ) && 
                (
                    this.SharedInvoiceQuoteCounter == input.SharedInvoiceQuoteCounter ||
                    (this.SharedInvoiceQuoteCounter != null &&
                    this.SharedInvoiceQuoteCounter.Equals(input.SharedInvoiceQuoteCounter))
                ) && 
                (
                    this.UpdateProducts == input.UpdateProducts ||
                    (this.UpdateProducts != null &&
                    this.UpdateProducts.Equals(input.UpdateProducts))
                ) && 
                (
                    this.ConvertProducts == input.ConvertProducts ||
                    (this.ConvertProducts != null &&
                    this.ConvertProducts.Equals(input.ConvertProducts))
                ) && 
                (
                    this.FillProducts == input.FillProducts ||
                    (this.FillProducts != null &&
                    this.FillProducts.Equals(input.FillProducts))
                ) && 
                (
                    this.InvoiceTerms == input.InvoiceTerms ||
                    (this.InvoiceTerms != null &&
                    this.InvoiceTerms.Equals(input.InvoiceTerms))
                ) && 
                (
                    this.QuoteTerms == input.QuoteTerms ||
                    (this.QuoteTerms != null &&
                    this.QuoteTerms.Equals(input.QuoteTerms))
                ) && 
                (
                    this.InvoiceTaxes == input.InvoiceTaxes ||
                    (this.InvoiceTaxes != null &&
                    this.InvoiceTaxes.Equals(input.InvoiceTaxes))
                ) && 
                (
                    this.InvoiceDesignId == input.InvoiceDesignId ||
                    (this.InvoiceDesignId != null &&
                    this.InvoiceDesignId.Equals(input.InvoiceDesignId))
                ) && 
                (
                    this.QuoteDesignId == input.QuoteDesignId ||
                    (this.QuoteDesignId != null &&
                    this.QuoteDesignId.Equals(input.QuoteDesignId))
                ) && 
                (
                    this.InvoiceFooter == input.InvoiceFooter ||
                    (this.InvoiceFooter != null &&
                    this.InvoiceFooter.Equals(input.InvoiceFooter))
                ) && 
                (
                    this.InvoiceLabels == input.InvoiceLabels ||
                    (this.InvoiceLabels != null &&
                    this.InvoiceLabels.Equals(input.InvoiceLabels))
                ) && 
                (
                    this.TaxRate1 == input.TaxRate1 ||
                    (this.TaxRate1 != null &&
                    this.TaxRate1.Equals(input.TaxRate1))
                ) && 
                (
                    this.TaxName1 == input.TaxName1 ||
                    (this.TaxName1 != null &&
                    this.TaxName1.Equals(input.TaxName1))
                ) && 
                (
                    this.TaxRate2 == input.TaxRate2 ||
                    (this.TaxRate2 != null &&
                    this.TaxRate2.Equals(input.TaxRate2))
                ) && 
                (
                    this.TaxName2 == input.TaxName2 ||
                    (this.TaxName2 != null &&
                    this.TaxName2.Equals(input.TaxName2))
                ) && 
                (
                    this.TaxRate3 == input.TaxRate3 ||
                    (this.TaxRate3 != null &&
                    this.TaxRate3.Equals(input.TaxRate3))
                ) && 
                (
                    this.TaxName3 == input.TaxName3 ||
                    (this.TaxName3 != null &&
                    this.TaxName3.Equals(input.TaxName3))
                ) && 
                (
                    this.PaymentTypeId == input.PaymentTypeId ||
                    (this.PaymentTypeId != null &&
                    this.PaymentTypeId.Equals(input.PaymentTypeId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.EmailFooter == input.EmailFooter ||
                    (this.EmailFooter != null &&
                    this.EmailFooter.Equals(input.EmailFooter))
                ) && 
                (
                    this.EmailSendingMethod == input.EmailSendingMethod ||
                    (this.EmailSendingMethod != null &&
                    this.EmailSendingMethod.Equals(input.EmailSendingMethod))
                ) && 
                (
                    this.GmailSendingUserId == input.GmailSendingUserId ||
                    (this.GmailSendingUserId != null &&
                    this.GmailSendingUserId.Equals(input.GmailSendingUserId))
                ) && 
                (
                    this.EmailSubjectInvoice == input.EmailSubjectInvoice ||
                    (this.EmailSubjectInvoice != null &&
                    this.EmailSubjectInvoice.Equals(input.EmailSubjectInvoice))
                ) && 
                (
                    this.EmailSubjectQuote == input.EmailSubjectQuote ||
                    (this.EmailSubjectQuote != null &&
                    this.EmailSubjectQuote.Equals(input.EmailSubjectQuote))
                ) && 
                (
                    this.EmailSubjectPayment == input.EmailSubjectPayment ||
                    (this.EmailSubjectPayment != null &&
                    this.EmailSubjectPayment.Equals(input.EmailSubjectPayment))
                ) && 
                (
                    this.EmailTemplateInvoice == input.EmailTemplateInvoice ||
                    (this.EmailTemplateInvoice != null &&
                    this.EmailTemplateInvoice.Equals(input.EmailTemplateInvoice))
                ) && 
                (
                    this.EmailTemplateQuote == input.EmailTemplateQuote ||
                    (this.EmailTemplateQuote != null &&
                    this.EmailTemplateQuote.Equals(input.EmailTemplateQuote))
                ) && 
                (
                    this.EmailTemplatePayment == input.EmailTemplatePayment ||
                    (this.EmailTemplatePayment != null &&
                    this.EmailTemplatePayment.Equals(input.EmailTemplatePayment))
                ) && 
                (
                    this.EmailSubjectReminder1 == input.EmailSubjectReminder1 ||
                    (this.EmailSubjectReminder1 != null &&
                    this.EmailSubjectReminder1.Equals(input.EmailSubjectReminder1))
                ) && 
                (
                    this.EmailSubjectReminder2 == input.EmailSubjectReminder2 ||
                    (this.EmailSubjectReminder2 != null &&
                    this.EmailSubjectReminder2.Equals(input.EmailSubjectReminder2))
                ) && 
                (
                    this.EmailSubjectReminder3 == input.EmailSubjectReminder3 ||
                    (this.EmailSubjectReminder3 != null &&
                    this.EmailSubjectReminder3.Equals(input.EmailSubjectReminder3))
                ) && 
                (
                    this.EmailSubjectReminderEndless == input.EmailSubjectReminderEndless ||
                    (this.EmailSubjectReminderEndless != null &&
                    this.EmailSubjectReminderEndless.Equals(input.EmailSubjectReminderEndless))
                ) && 
                (
                    this.EmailTemplateReminder1 == input.EmailTemplateReminder1 ||
                    (this.EmailTemplateReminder1 != null &&
                    this.EmailTemplateReminder1.Equals(input.EmailTemplateReminder1))
                ) && 
                (
                    this.EmailTemplateReminder2 == input.EmailTemplateReminder2 ||
                    (this.EmailTemplateReminder2 != null &&
                    this.EmailTemplateReminder2.Equals(input.EmailTemplateReminder2))
                ) && 
                (
                    this.EmailTemplateReminder3 == input.EmailTemplateReminder3 ||
                    (this.EmailTemplateReminder3 != null &&
                    this.EmailTemplateReminder3.Equals(input.EmailTemplateReminder3))
                ) && 
                (
                    this.EmailTemplateReminderEndless == input.EmailTemplateReminderEndless ||
                    (this.EmailTemplateReminderEndless != null &&
                    this.EmailTemplateReminderEndless.Equals(input.EmailTemplateReminderEndless))
                ) && 
                (
                    this.EnablePortalPassword == input.EnablePortalPassword ||
                    (this.EnablePortalPassword != null &&
                    this.EnablePortalPassword.Equals(input.EnablePortalPassword))
                ) && 
                (
                    this.ShowAcceptInvoiceTerms == input.ShowAcceptInvoiceTerms ||
                    (this.ShowAcceptInvoiceTerms != null &&
                    this.ShowAcceptInvoiceTerms.Equals(input.ShowAcceptInvoiceTerms))
                ) && 
                (
                    this.ShowAcceptQuoteTerms == input.ShowAcceptQuoteTerms ||
                    (this.ShowAcceptQuoteTerms != null &&
                    this.ShowAcceptQuoteTerms.Equals(input.ShowAcceptQuoteTerms))
                ) && 
                (
                    this.RequireInvoiceSignature == input.RequireInvoiceSignature ||
                    (this.RequireInvoiceSignature != null &&
                    this.RequireInvoiceSignature.Equals(input.RequireInvoiceSignature))
                ) && 
                (
                    this.RequireQuoteSignature == input.RequireQuoteSignature ||
                    (this.RequireQuoteSignature != null &&
                    this.RequireQuoteSignature.Equals(input.RequireQuoteSignature))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CompanyLogo == input.CompanyLogo ||
                    (this.CompanyLogo != null &&
                    this.CompanyLogo.Equals(input.CompanyLogo))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.PrimaryFont == input.PrimaryFont ||
                    (this.PrimaryFont != null &&
                    this.PrimaryFont.Equals(input.PrimaryFont))
                ) && 
                (
                    this.SecondaryFont == input.SecondaryFont ||
                    (this.SecondaryFont != null &&
                    this.SecondaryFont.Equals(input.SecondaryFont))
                ) && 
                (
                    this.HidePaidToDate == input.HidePaidToDate ||
                    (this.HidePaidToDate != null &&
                    this.HidePaidToDate.Equals(input.HidePaidToDate))
                ) && 
                (
                    this.EmbedDocuments == input.EmbedDocuments ||
                    (this.EmbedDocuments != null &&
                    this.EmbedDocuments.Equals(input.EmbedDocuments))
                ) && 
                (
                    this.AllPagesHeader == input.AllPagesHeader ||
                    (this.AllPagesHeader != null &&
                    this.AllPagesHeader.Equals(input.AllPagesHeader))
                ) && 
                (
                    this.AllPagesFooter == input.AllPagesFooter ||
                    (this.AllPagesFooter != null &&
                    this.AllPagesFooter.Equals(input.AllPagesFooter))
                ) && 
                (
                    this.DocumentEmailAttachment == input.DocumentEmailAttachment ||
                    (this.DocumentEmailAttachment != null &&
                    this.DocumentEmailAttachment.Equals(input.DocumentEmailAttachment))
                ) && 
                (
                    this.EnableClientPortalPassword == input.EnableClientPortalPassword ||
                    (this.EnableClientPortalPassword != null &&
                    this.EnableClientPortalPassword.Equals(input.EnableClientPortalPassword))
                ) && 
                (
                    this.EnableEmailMarkup == input.EnableEmailMarkup ||
                    (this.EnableEmailMarkup != null &&
                    this.EnableEmailMarkup.Equals(input.EnableEmailMarkup))
                ) && 
                (
                    this.EnableClientPortalDashboard == input.EnableClientPortalDashboard ||
                    (this.EnableClientPortalDashboard != null &&
                    this.EnableClientPortalDashboard.Equals(input.EnableClientPortalDashboard))
                ) && 
                (
                    this.EnableClientPortal == input.EnableClientPortal ||
                    (this.EnableClientPortal != null &&
                    this.EnableClientPortal.Equals(input.EnableClientPortal))
                ) && 
                (
                    this.EmailTemplateStatement == input.EmailTemplateStatement ||
                    (this.EmailTemplateStatement != null &&
                    this.EmailTemplateStatement.Equals(input.EmailTemplateStatement))
                ) && 
                (
                    this.EmailSubjectStatement == input.EmailSubjectStatement ||
                    (this.EmailSubjectStatement != null &&
                    this.EmailSubjectStatement.Equals(input.EmailSubjectStatement))
                ) && 
                (
                    this.SignatureOnPdf == input.SignatureOnPdf ||
                    (this.SignatureOnPdf != null &&
                    this.SignatureOnPdf.Equals(input.SignatureOnPdf))
                ) && 
                (
                    this.QuoteFooter == input.QuoteFooter ||
                    (this.QuoteFooter != null &&
                    this.QuoteFooter.Equals(input.QuoteFooter))
                ) && 
                (
                    this.EmailSubjectCustom1 == input.EmailSubjectCustom1 ||
                    (this.EmailSubjectCustom1 != null &&
                    this.EmailSubjectCustom1.Equals(input.EmailSubjectCustom1))
                ) && 
                (
                    this.EmailSubjectCustom2 == input.EmailSubjectCustom2 ||
                    (this.EmailSubjectCustom2 != null &&
                    this.EmailSubjectCustom2.Equals(input.EmailSubjectCustom2))
                ) && 
                (
                    this.EmailSubjectCustom3 == input.EmailSubjectCustom3 ||
                    (this.EmailSubjectCustom3 != null &&
                    this.EmailSubjectCustom3.Equals(input.EmailSubjectCustom3))
                ) && 
                (
                    this.EmailTemplateCustom1 == input.EmailTemplateCustom1 ||
                    (this.EmailTemplateCustom1 != null &&
                    this.EmailTemplateCustom1.Equals(input.EmailTemplateCustom1))
                ) && 
                (
                    this.EmailTemplateCustom2 == input.EmailTemplateCustom2 ||
                    (this.EmailTemplateCustom2 != null &&
                    this.EmailTemplateCustom2.Equals(input.EmailTemplateCustom2))
                ) && 
                (
                    this.EmailTemplateCustom3 == input.EmailTemplateCustom3 ||
                    (this.EmailTemplateCustom3 != null &&
                    this.EmailTemplateCustom3.Equals(input.EmailTemplateCustom3))
                ) && 
                (
                    this.EnableReminder1 == input.EnableReminder1 ||
                    (this.EnableReminder1 != null &&
                    this.EnableReminder1.Equals(input.EnableReminder1))
                ) && 
                (
                    this.EnableReminder2 == input.EnableReminder2 ||
                    (this.EnableReminder2 != null &&
                    this.EnableReminder2.Equals(input.EnableReminder2))
                ) && 
                (
                    this.EnableReminder3 == input.EnableReminder3 ||
                    (this.EnableReminder3 != null &&
                    this.EnableReminder3.Equals(input.EnableReminder3))
                ) && 
                (
                    this.NumDaysReminder1 == input.NumDaysReminder1 ||
                    (this.NumDaysReminder1 != null &&
                    this.NumDaysReminder1.Equals(input.NumDaysReminder1))
                ) && 
                (
                    this.NumDaysReminder2 == input.NumDaysReminder2 ||
                    (this.NumDaysReminder2 != null &&
                    this.NumDaysReminder2.Equals(input.NumDaysReminder2))
                ) && 
                (
                    this.NumDaysReminder3 == input.NumDaysReminder3 ||
                    (this.NumDaysReminder3 != null &&
                    this.NumDaysReminder3.Equals(input.NumDaysReminder3))
                ) && 
                (
                    this.ScheduleReminder1 == input.ScheduleReminder1 ||
                    (this.ScheduleReminder1 != null &&
                    this.ScheduleReminder1.Equals(input.ScheduleReminder1))
                ) && 
                (
                    this.ScheduleReminder2 == input.ScheduleReminder2 ||
                    (this.ScheduleReminder2 != null &&
                    this.ScheduleReminder2.Equals(input.ScheduleReminder2))
                ) && 
                (
                    this.ScheduleReminder3 == input.ScheduleReminder3 ||
                    (this.ScheduleReminder3 != null &&
                    this.ScheduleReminder3.Equals(input.ScheduleReminder3))
                ) && 
                (
                    this.LateFeeAmount1 == input.LateFeeAmount1 ||
                    (this.LateFeeAmount1 != null &&
                    this.LateFeeAmount1.Equals(input.LateFeeAmount1))
                ) && 
                (
                    this.LateFeeAmount2 == input.LateFeeAmount2 ||
                    (this.LateFeeAmount2 != null &&
                    this.LateFeeAmount2.Equals(input.LateFeeAmount2))
                ) && 
                (
                    this.LateFeeAmount3 == input.LateFeeAmount3 ||
                    (this.LateFeeAmount3 != null &&
                    this.LateFeeAmount3.Equals(input.LateFeeAmount3))
                ) && 
                (
                    this.EndlessReminderFrequencyId == input.EndlessReminderFrequencyId ||
                    (this.EndlessReminderFrequencyId != null &&
                    this.EndlessReminderFrequencyId.Equals(input.EndlessReminderFrequencyId))
                ) && 
                (
                    this.ClientOnlinePaymentNotification == input.ClientOnlinePaymentNotification ||
                    (this.ClientOnlinePaymentNotification != null &&
                    this.ClientOnlinePaymentNotification.Equals(input.ClientOnlinePaymentNotification))
                ) && 
                (
                    this.ClientManualPaymentNotification == input.ClientManualPaymentNotification ||
                    (this.ClientManualPaymentNotification != null &&
                    this.ClientManualPaymentNotification.Equals(input.ClientManualPaymentNotification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimezoneId != null)
                    hashCode = hashCode * 59 + this.TimezoneId.GetHashCode();
                if (this.DateFormatId != null)
                    hashCode = hashCode * 59 + this.DateFormatId.GetHashCode();
                if (this.MilitaryTime != null)
                    hashCode = hashCode * 59 + this.MilitaryTime.GetHashCode();
                if (this.LanguageId != null)
                    hashCode = hashCode * 59 + this.LanguageId.GetHashCode();
                if (this.ShowCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ShowCurrencyCode.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.PaymentTerms != null)
                    hashCode = hashCode * 59 + this.PaymentTerms.GetHashCode();
                if (this.CompanyGatewayIds != null)
                    hashCode = hashCode * 59 + this.CompanyGatewayIds.GetHashCode();
                if (this.CustomValue1 != null)
                    hashCode = hashCode * 59 + this.CustomValue1.GetHashCode();
                if (this.CustomValue2 != null)
                    hashCode = hashCode * 59 + this.CustomValue2.GetHashCode();
                if (this.CustomValue3 != null)
                    hashCode = hashCode * 59 + this.CustomValue3.GetHashCode();
                if (this.CustomValue4 != null)
                    hashCode = hashCode * 59 + this.CustomValue4.GetHashCode();
                if (this.DefaultTaskRate != null)
                    hashCode = hashCode * 59 + this.DefaultTaskRate.GetHashCode();
                if (this.SendReminders != null)
                    hashCode = hashCode * 59 + this.SendReminders.GetHashCode();
                if (this.EnableClientPortalTasks != null)
                    hashCode = hashCode * 59 + this.EnableClientPortalTasks.GetHashCode();
                if (this.EmailStyle != null)
                    hashCode = hashCode * 59 + this.EmailStyle.GetHashCode();
                if (this.ReplyToEmail != null)
                    hashCode = hashCode * 59 + this.ReplyToEmail.GetHashCode();
                if (this.BccEmail != null)
                    hashCode = hashCode * 59 + this.BccEmail.GetHashCode();
                if (this.PdfEmailAttachment != null)
                    hashCode = hashCode * 59 + this.PdfEmailAttachment.GetHashCode();
                if (this.UblEmailAttachment != null)
                    hashCode = hashCode * 59 + this.UblEmailAttachment.GetHashCode();
                if (this.EmailStyleCustom != null)
                    hashCode = hashCode * 59 + this.EmailStyleCustom.GetHashCode();
                if (this.CounterNumberApplied != null)
                    hashCode = hashCode * 59 + this.CounterNumberApplied.GetHashCode();
                if (this.QuoteNumberApplied != null)
                    hashCode = hashCode * 59 + this.QuoteNumberApplied.GetHashCode();
                if (this.CustomMessageDashboard != null)
                    hashCode = hashCode * 59 + this.CustomMessageDashboard.GetHashCode();
                if (this.CustomMessageUnpaidInvoice != null)
                    hashCode = hashCode * 59 + this.CustomMessageUnpaidInvoice.GetHashCode();
                if (this.CustomMessagePaidInvoice != null)
                    hashCode = hashCode * 59 + this.CustomMessagePaidInvoice.GetHashCode();
                if (this.CustomMessageUnapprovedQuote != null)
                    hashCode = hashCode * 59 + this.CustomMessageUnapprovedQuote.GetHashCode();
                if (this.LockInvoices != null)
                    hashCode = hashCode * 59 + this.LockInvoices.GetHashCode();
                if (this.AutoArchiveInvoice != null)
                    hashCode = hashCode * 59 + this.AutoArchiveInvoice.GetHashCode();
                if (this.AutoArchiveQuote != null)
                    hashCode = hashCode * 59 + this.AutoArchiveQuote.GetHashCode();
                if (this.AutoConvertQuote != null)
                    hashCode = hashCode * 59 + this.AutoConvertQuote.GetHashCode();
                if (this.InclusiveTaxes != null)
                    hashCode = hashCode * 59 + this.InclusiveTaxes.GetHashCode();
                if (this.Translations != null)
                    hashCode = hashCode * 59 + this.Translations.GetHashCode();
                if (this.TaskNumberPattern != null)
                    hashCode = hashCode * 59 + this.TaskNumberPattern.GetHashCode();
                if (this.TaskNumberCounter != null)
                    hashCode = hashCode * 59 + this.TaskNumberCounter.GetHashCode();
                if (this.ReminderSendTime != null)
                    hashCode = hashCode * 59 + this.ReminderSendTime.GetHashCode();
                if (this.ExpenseNumberPattern != null)
                    hashCode = hashCode * 59 + this.ExpenseNumberPattern.GetHashCode();
                if (this.ExpenseNumberCounter != null)
                    hashCode = hashCode * 59 + this.ExpenseNumberCounter.GetHashCode();
                if (this.VendorNumberPattern != null)
                    hashCode = hashCode * 59 + this.VendorNumberPattern.GetHashCode();
                if (this.VendorNumberCounter != null)
                    hashCode = hashCode * 59 + this.VendorNumberCounter.GetHashCode();
                if (this.TicketNumberPattern != null)
                    hashCode = hashCode * 59 + this.TicketNumberPattern.GetHashCode();
                if (this.TicketNumberCounter != null)
                    hashCode = hashCode * 59 + this.TicketNumberCounter.GetHashCode();
                if (this.PaymentNumberPattern != null)
                    hashCode = hashCode * 59 + this.PaymentNumberPattern.GetHashCode();
                if (this.PaymentNumberCounter != null)
                    hashCode = hashCode * 59 + this.PaymentNumberCounter.GetHashCode();
                if (this.InvoiceNumberPattern != null)
                    hashCode = hashCode * 59 + this.InvoiceNumberPattern.GetHashCode();
                if (this.InvoiceNumberCounter != null)
                    hashCode = hashCode * 59 + this.InvoiceNumberCounter.GetHashCode();
                if (this.QuoteNumberPattern != null)
                    hashCode = hashCode * 59 + this.QuoteNumberPattern.GetHashCode();
                if (this.QuoteNumberCounter != null)
                    hashCode = hashCode * 59 + this.QuoteNumberCounter.GetHashCode();
                if (this.ClientNumberPattern != null)
                    hashCode = hashCode * 59 + this.ClientNumberPattern.GetHashCode();
                if (this.ClientNumberCounter != null)
                    hashCode = hashCode * 59 + this.ClientNumberCounter.GetHashCode();
                if (this.CreditNumberPattern != null)
                    hashCode = hashCode * 59 + this.CreditNumberPattern.GetHashCode();
                if (this.CreditNumberCounter != null)
                    hashCode = hashCode * 59 + this.CreditNumberCounter.GetHashCode();
                if (this.RecurringInvoiceNumberPrefix != null)
                    hashCode = hashCode * 59 + this.RecurringInvoiceNumberPrefix.GetHashCode();
                if (this.ResetCounterFrequencyId != null)
                    hashCode = hashCode * 59 + this.ResetCounterFrequencyId.GetHashCode();
                if (this.ResetCounterDate != null)
                    hashCode = hashCode * 59 + this.ResetCounterDate.GetHashCode();
                if (this.CounterPadding != null)
                    hashCode = hashCode * 59 + this.CounterPadding.GetHashCode();
                if (this.SharedInvoiceQuoteCounter != null)
                    hashCode = hashCode * 59 + this.SharedInvoiceQuoteCounter.GetHashCode();
                if (this.UpdateProducts != null)
                    hashCode = hashCode * 59 + this.UpdateProducts.GetHashCode();
                if (this.ConvertProducts != null)
                    hashCode = hashCode * 59 + this.ConvertProducts.GetHashCode();
                if (this.FillProducts != null)
                    hashCode = hashCode * 59 + this.FillProducts.GetHashCode();
                if (this.InvoiceTerms != null)
                    hashCode = hashCode * 59 + this.InvoiceTerms.GetHashCode();
                if (this.QuoteTerms != null)
                    hashCode = hashCode * 59 + this.QuoteTerms.GetHashCode();
                if (this.InvoiceTaxes != null)
                    hashCode = hashCode * 59 + this.InvoiceTaxes.GetHashCode();
                if (this.InvoiceDesignId != null)
                    hashCode = hashCode * 59 + this.InvoiceDesignId.GetHashCode();
                if (this.QuoteDesignId != null)
                    hashCode = hashCode * 59 + this.QuoteDesignId.GetHashCode();
                if (this.InvoiceFooter != null)
                    hashCode = hashCode * 59 + this.InvoiceFooter.GetHashCode();
                if (this.InvoiceLabels != null)
                    hashCode = hashCode * 59 + this.InvoiceLabels.GetHashCode();
                if (this.TaxRate1 != null)
                    hashCode = hashCode * 59 + this.TaxRate1.GetHashCode();
                if (this.TaxName1 != null)
                    hashCode = hashCode * 59 + this.TaxName1.GetHashCode();
                if (this.TaxRate2 != null)
                    hashCode = hashCode * 59 + this.TaxRate2.GetHashCode();
                if (this.TaxName2 != null)
                    hashCode = hashCode * 59 + this.TaxName2.GetHashCode();
                if (this.TaxRate3 != null)
                    hashCode = hashCode * 59 + this.TaxRate3.GetHashCode();
                if (this.TaxName3 != null)
                    hashCode = hashCode * 59 + this.TaxName3.GetHashCode();
                if (this.PaymentTypeId != null)
                    hashCode = hashCode * 59 + this.PaymentTypeId.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.EmailFooter != null)
                    hashCode = hashCode * 59 + this.EmailFooter.GetHashCode();
                if (this.EmailSendingMethod != null)
                    hashCode = hashCode * 59 + this.EmailSendingMethod.GetHashCode();
                if (this.GmailSendingUserId != null)
                    hashCode = hashCode * 59 + this.GmailSendingUserId.GetHashCode();
                if (this.EmailSubjectInvoice != null)
                    hashCode = hashCode * 59 + this.EmailSubjectInvoice.GetHashCode();
                if (this.EmailSubjectQuote != null)
                    hashCode = hashCode * 59 + this.EmailSubjectQuote.GetHashCode();
                if (this.EmailSubjectPayment != null)
                    hashCode = hashCode * 59 + this.EmailSubjectPayment.GetHashCode();
                if (this.EmailTemplateInvoice != null)
                    hashCode = hashCode * 59 + this.EmailTemplateInvoice.GetHashCode();
                if (this.EmailTemplateQuote != null)
                    hashCode = hashCode * 59 + this.EmailTemplateQuote.GetHashCode();
                if (this.EmailTemplatePayment != null)
                    hashCode = hashCode * 59 + this.EmailTemplatePayment.GetHashCode();
                if (this.EmailSubjectReminder1 != null)
                    hashCode = hashCode * 59 + this.EmailSubjectReminder1.GetHashCode();
                if (this.EmailSubjectReminder2 != null)
                    hashCode = hashCode * 59 + this.EmailSubjectReminder2.GetHashCode();
                if (this.EmailSubjectReminder3 != null)
                    hashCode = hashCode * 59 + this.EmailSubjectReminder3.GetHashCode();
                if (this.EmailSubjectReminderEndless != null)
                    hashCode = hashCode * 59 + this.EmailSubjectReminderEndless.GetHashCode();
                if (this.EmailTemplateReminder1 != null)
                    hashCode = hashCode * 59 + this.EmailTemplateReminder1.GetHashCode();
                if (this.EmailTemplateReminder2 != null)
                    hashCode = hashCode * 59 + this.EmailTemplateReminder2.GetHashCode();
                if (this.EmailTemplateReminder3 != null)
                    hashCode = hashCode * 59 + this.EmailTemplateReminder3.GetHashCode();
                if (this.EmailTemplateReminderEndless != null)
                    hashCode = hashCode * 59 + this.EmailTemplateReminderEndless.GetHashCode();
                if (this.EnablePortalPassword != null)
                    hashCode = hashCode * 59 + this.EnablePortalPassword.GetHashCode();
                if (this.ShowAcceptInvoiceTerms != null)
                    hashCode = hashCode * 59 + this.ShowAcceptInvoiceTerms.GetHashCode();
                if (this.ShowAcceptQuoteTerms != null)
                    hashCode = hashCode * 59 + this.ShowAcceptQuoteTerms.GetHashCode();
                if (this.RequireInvoiceSignature != null)
                    hashCode = hashCode * 59 + this.RequireInvoiceSignature.GetHashCode();
                if (this.RequireQuoteSignature != null)
                    hashCode = hashCode * 59 + this.RequireQuoteSignature.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CompanyLogo != null)
                    hashCode = hashCode * 59 + this.CompanyLogo.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.PrimaryFont != null)
                    hashCode = hashCode * 59 + this.PrimaryFont.GetHashCode();
                if (this.SecondaryFont != null)
                    hashCode = hashCode * 59 + this.SecondaryFont.GetHashCode();
                if (this.HidePaidToDate != null)
                    hashCode = hashCode * 59 + this.HidePaidToDate.GetHashCode();
                if (this.EmbedDocuments != null)
                    hashCode = hashCode * 59 + this.EmbedDocuments.GetHashCode();
                if (this.AllPagesHeader != null)
                    hashCode = hashCode * 59 + this.AllPagesHeader.GetHashCode();
                if (this.AllPagesFooter != null)
                    hashCode = hashCode * 59 + this.AllPagesFooter.GetHashCode();
                if (this.DocumentEmailAttachment != null)
                    hashCode = hashCode * 59 + this.DocumentEmailAttachment.GetHashCode();
                if (this.EnableClientPortalPassword != null)
                    hashCode = hashCode * 59 + this.EnableClientPortalPassword.GetHashCode();
                if (this.EnableEmailMarkup != null)
                    hashCode = hashCode * 59 + this.EnableEmailMarkup.GetHashCode();
                if (this.EnableClientPortalDashboard != null)
                    hashCode = hashCode * 59 + this.EnableClientPortalDashboard.GetHashCode();
                if (this.EnableClientPortal != null)
                    hashCode = hashCode * 59 + this.EnableClientPortal.GetHashCode();
                if (this.EmailTemplateStatement != null)
                    hashCode = hashCode * 59 + this.EmailTemplateStatement.GetHashCode();
                if (this.EmailSubjectStatement != null)
                    hashCode = hashCode * 59 + this.EmailSubjectStatement.GetHashCode();
                if (this.SignatureOnPdf != null)
                    hashCode = hashCode * 59 + this.SignatureOnPdf.GetHashCode();
                if (this.QuoteFooter != null)
                    hashCode = hashCode * 59 + this.QuoteFooter.GetHashCode();
                if (this.EmailSubjectCustom1 != null)
                    hashCode = hashCode * 59 + this.EmailSubjectCustom1.GetHashCode();
                if (this.EmailSubjectCustom2 != null)
                    hashCode = hashCode * 59 + this.EmailSubjectCustom2.GetHashCode();
                if (this.EmailSubjectCustom3 != null)
                    hashCode = hashCode * 59 + this.EmailSubjectCustom3.GetHashCode();
                if (this.EmailTemplateCustom1 != null)
                    hashCode = hashCode * 59 + this.EmailTemplateCustom1.GetHashCode();
                if (this.EmailTemplateCustom2 != null)
                    hashCode = hashCode * 59 + this.EmailTemplateCustom2.GetHashCode();
                if (this.EmailTemplateCustom3 != null)
                    hashCode = hashCode * 59 + this.EmailTemplateCustom3.GetHashCode();
                if (this.EnableReminder1 != null)
                    hashCode = hashCode * 59 + this.EnableReminder1.GetHashCode();
                if (this.EnableReminder2 != null)
                    hashCode = hashCode * 59 + this.EnableReminder2.GetHashCode();
                if (this.EnableReminder3 != null)
                    hashCode = hashCode * 59 + this.EnableReminder3.GetHashCode();
                if (this.NumDaysReminder1 != null)
                    hashCode = hashCode * 59 + this.NumDaysReminder1.GetHashCode();
                if (this.NumDaysReminder2 != null)
                    hashCode = hashCode * 59 + this.NumDaysReminder2.GetHashCode();
                if (this.NumDaysReminder3 != null)
                    hashCode = hashCode * 59 + this.NumDaysReminder3.GetHashCode();
                if (this.ScheduleReminder1 != null)
                    hashCode = hashCode * 59 + this.ScheduleReminder1.GetHashCode();
                if (this.ScheduleReminder2 != null)
                    hashCode = hashCode * 59 + this.ScheduleReminder2.GetHashCode();
                if (this.ScheduleReminder3 != null)
                    hashCode = hashCode * 59 + this.ScheduleReminder3.GetHashCode();
                if (this.LateFeeAmount1 != null)
                    hashCode = hashCode * 59 + this.LateFeeAmount1.GetHashCode();
                if (this.LateFeeAmount2 != null)
                    hashCode = hashCode * 59 + this.LateFeeAmount2.GetHashCode();
                if (this.LateFeeAmount3 != null)
                    hashCode = hashCode * 59 + this.LateFeeAmount3.GetHashCode();
                if (this.EndlessReminderFrequencyId != null)
                    hashCode = hashCode * 59 + this.EndlessReminderFrequencyId.GetHashCode();
                if (this.ClientOnlinePaymentNotification != null)
                    hashCode = hashCode * 59 + this.ClientOnlinePaymentNotification.GetHashCode();
                if (this.ClientManualPaymentNotification != null)
                    hashCode = hashCode * 59 + this.ClientManualPaymentNotification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
