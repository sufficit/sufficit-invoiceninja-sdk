/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// CompanyGateway
    /// </summary>
    [DataContract]
        public partial class CompanyGateway :  IEquatable<CompanyGateway>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyGateway" /> class.
        /// </summary>
        /// <param name="id">______.</param>
        /// <param name="companyId">______.</param>
        /// <param name="gatewayKey">______.</param>
        /// <param name="acceptedCreditCards">Bitmask representation of cards.</param>
        /// <param name="requireBillingAddress">______.</param>
        /// <param name="requireShippingAddress">______.</param>
        /// <param name="config">The configuration map for the gateway.</param>
        /// <param name="updateDetails">______.</param>
        /// <param name="feesAndLimits">A mapped collection of the fees and limits for the configured gateway.</param>
        public CompanyGateway(string id = default(string), string companyId = default(string), string gatewayKey = default(string), int? acceptedCreditCards = default(int?), bool? requireBillingAddress = default(bool?), bool? requireShippingAddress = default(bool?), string config = default(string), bool? updateDetails = default(bool?), List<FeesAndLimits> feesAndLimits = default(List<FeesAndLimits>))
        {
            this.Id = id;
            this.CompanyId = companyId;
            this.GatewayKey = gatewayKey;
            this.AcceptedCreditCards = acceptedCreditCards;
            this.RequireBillingAddress = requireBillingAddress;
            this.RequireShippingAddress = requireShippingAddress;
            this.Config = config;
            this.UpdateDetails = updateDetails;
            this.FeesAndLimits = feesAndLimits;
        }
        
        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="company_id", EmitDefaultValue=false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="gateway_key", EmitDefaultValue=false)]
        public string GatewayKey { get; set; }

        /// <summary>
        /// Bitmask representation of cards
        /// </summary>
        /// <value>Bitmask representation of cards</value>
        [DataMember(Name="accepted_credit_cards", EmitDefaultValue=false)]
        public int? AcceptedCreditCards { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="require_billing_address", EmitDefaultValue=false)]
        public bool? RequireBillingAddress { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="require_shipping_address", EmitDefaultValue=false)]
        public bool? RequireShippingAddress { get; set; }

        /// <summary>
        /// The configuration map for the gateway
        /// </summary>
        /// <value>The configuration map for the gateway</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public string Config { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="update_details", EmitDefaultValue=false)]
        public bool? UpdateDetails { get; set; }

        /// <summary>
        /// A mapped collection of the fees and limits for the configured gateway
        /// </summary>
        /// <value>A mapped collection of the fees and limits for the configured gateway</value>
        [DataMember(Name="fees_and_limits", EmitDefaultValue=false)]
        public List<FeesAndLimits> FeesAndLimits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyGateway {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  GatewayKey: ").Append(GatewayKey).Append("\n");
            sb.Append("  AcceptedCreditCards: ").Append(AcceptedCreditCards).Append("\n");
            sb.Append("  RequireBillingAddress: ").Append(RequireBillingAddress).Append("\n");
            sb.Append("  RequireShippingAddress: ").Append(RequireShippingAddress).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  UpdateDetails: ").Append(UpdateDetails).Append("\n");
            sb.Append("  FeesAndLimits: ").Append(FeesAndLimits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyGateway);
        }

        /// <summary>
        /// Returns true if CompanyGateway instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyGateway to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyGateway input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.GatewayKey == input.GatewayKey ||
                    (this.GatewayKey != null &&
                    this.GatewayKey.Equals(input.GatewayKey))
                ) && 
                (
                    this.AcceptedCreditCards == input.AcceptedCreditCards ||
                    (this.AcceptedCreditCards != null &&
                    this.AcceptedCreditCards.Equals(input.AcceptedCreditCards))
                ) && 
                (
                    this.RequireBillingAddress == input.RequireBillingAddress ||
                    (this.RequireBillingAddress != null &&
                    this.RequireBillingAddress.Equals(input.RequireBillingAddress))
                ) && 
                (
                    this.RequireShippingAddress == input.RequireShippingAddress ||
                    (this.RequireShippingAddress != null &&
                    this.RequireShippingAddress.Equals(input.RequireShippingAddress))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.UpdateDetails == input.UpdateDetails ||
                    (this.UpdateDetails != null &&
                    this.UpdateDetails.Equals(input.UpdateDetails))
                ) && 
                (
                    this.FeesAndLimits == input.FeesAndLimits ||
                    this.FeesAndLimits != null &&
                    input.FeesAndLimits != null &&
                    this.FeesAndLimits.SequenceEqual(input.FeesAndLimits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.GatewayKey != null)
                    hashCode = hashCode * 59 + this.GatewayKey.GetHashCode();
                if (this.AcceptedCreditCards != null)
                    hashCode = hashCode * 59 + this.AcceptedCreditCards.GetHashCode();
                if (this.RequireBillingAddress != null)
                    hashCode = hashCode * 59 + this.RequireBillingAddress.GetHashCode();
                if (this.RequireShippingAddress != null)
                    hashCode = hashCode * 59 + this.RequireShippingAddress.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.UpdateDetails != null)
                    hashCode = hashCode * 59 + this.UpdateDetails.GetHashCode();
                if (this.FeesAndLimits != null)
                    hashCode = hashCode * 59 + this.FeesAndLimits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
