/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// Company
    /// </summary>
    [DataContract]
        public partial class Company :  IEquatable<Company>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        /// <param name="id">The company hash id.</param>
        /// <param name="sizeId">The company size ID.</param>
        /// <param name="industryId">The company industry ID.</param>
        /// <param name="slackWebhookUrl">The slack webhook notification URL.</param>
        /// <param name="googleAnalyticsKey">The google analytics key.</param>
        /// <param name="portalMode">Determines the client facing urls ie: subdomain,domain,iframe.</param>
        /// <param name="subdomain">Specifies the first part of the company domain ie acme in acme.domain.com.</param>
        /// <param name="portalDomain">The fully qualified domain for client facing URLS.</param>
        /// <param name="enabledTaxRates">Number of taxes rates used per entity.</param>
        /// <param name="fillProducts">Toggles filling a product description based on product key.</param>
        /// <param name="convertProducts">___________.</param>
        /// <param name="updateProducts">Toggles updating a product description which description changes.</param>
        /// <param name="showProductDetails">Toggles showing a product description which description changes.</param>
        /// <param name="customFields">Custom fields map.</param>
        /// <param name="enableProductCost">______________.</param>
        /// <param name="enableProductQuantity">______________.</param>
        /// <param name="defaultQuantity">______________.</param>
        /// <param name="customSurchargeTaxes1">Toggles charging taxes on custom surcharge amounts.</param>
        /// <param name="customSurchargeTaxes2">Toggles charging taxes on custom surcharge amounts.</param>
        /// <param name="customSurchargeTaxes3">Toggles charging taxes on custom surcharge amounts.</param>
        /// <param name="customSurchargeTaxes4">Toggles charging taxes on custom surcharge amounts.</param>
        /// <param name="logo">The company logo - binary.</param>
        /// <param name="settings">settings.</param>
        public Company(string id = default(string), string sizeId = default(string), string industryId = default(string), string slackWebhookUrl = default(string), string googleAnalyticsKey = default(string), string portalMode = default(string), string subdomain = default(string), string portalDomain = default(string), int? enabledTaxRates = default(int?), bool? fillProducts = default(bool?), bool? convertProducts = default(bool?), bool? updateProducts = default(bool?), bool? showProductDetails = default(bool?), Object customFields = default(Object), bool? enableProductCost = default(bool?), bool? enableProductQuantity = default(bool?), bool? defaultQuantity = default(bool?), bool? customSurchargeTaxes1 = default(bool?), bool? customSurchargeTaxes2 = default(bool?), bool? customSurchargeTaxes3 = default(bool?), bool? customSurchargeTaxes4 = default(bool?), Object logo = default(Object), CompanySettings settings = default(CompanySettings))
        {
            this.Id = id;
            this.SizeId = sizeId;
            this.IndustryId = industryId;
            this.SlackWebhookUrl = slackWebhookUrl;
            this.GoogleAnalyticsKey = googleAnalyticsKey;
            this.PortalMode = portalMode;
            this.Subdomain = subdomain;
            this.PortalDomain = portalDomain;
            this.EnabledTaxRates = enabledTaxRates;
            this.FillProducts = fillProducts;
            this.ConvertProducts = convertProducts;
            this.UpdateProducts = updateProducts;
            this.ShowProductDetails = showProductDetails;
            this.CustomFields = customFields;
            this.EnableProductCost = enableProductCost;
            this.EnableProductQuantity = enableProductQuantity;
            this.DefaultQuantity = defaultQuantity;
            this.CustomSurchargeTaxes1 = customSurchargeTaxes1;
            this.CustomSurchargeTaxes2 = customSurchargeTaxes2;
            this.CustomSurchargeTaxes3 = customSurchargeTaxes3;
            this.CustomSurchargeTaxes4 = customSurchargeTaxes4;
            this.Logo = logo;
            this.Settings = settings;
        }
        
        /// <summary>
        /// The company hash id
        /// </summary>
        /// <value>The company hash id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The company size ID
        /// </summary>
        /// <value>The company size ID</value>
        [DataMember(Name="size_id", EmitDefaultValue=false)]
        public string SizeId { get; set; }

        /// <summary>
        /// The company industry ID
        /// </summary>
        /// <value>The company industry ID</value>
        [DataMember(Name="industry_id", EmitDefaultValue=false)]
        public string IndustryId { get; set; }

        /// <summary>
        /// The slack webhook notification URL
        /// </summary>
        /// <value>The slack webhook notification URL</value>
        [DataMember(Name="slack_webhook_url", EmitDefaultValue=false)]
        public string SlackWebhookUrl { get; set; }

        /// <summary>
        /// The google analytics key
        /// </summary>
        /// <value>The google analytics key</value>
        [DataMember(Name="google_analytics_key", EmitDefaultValue=false)]
        public string GoogleAnalyticsKey { get; set; }

        /// <summary>
        /// Determines the client facing urls ie: subdomain,domain,iframe
        /// </summary>
        /// <value>Determines the client facing urls ie: subdomain,domain,iframe</value>
        [DataMember(Name="portal_mode", EmitDefaultValue=false)]
        public string PortalMode { get; set; }

        /// <summary>
        /// Specifies the first part of the company domain ie acme in acme.domain.com
        /// </summary>
        /// <value>Specifies the first part of the company domain ie acme in acme.domain.com</value>
        [DataMember(Name="subdomain", EmitDefaultValue=false)]
        public string Subdomain { get; set; }

        /// <summary>
        /// The fully qualified domain for client facing URLS
        /// </summary>
        /// <value>The fully qualified domain for client facing URLS</value>
        [DataMember(Name="portal_domain", EmitDefaultValue=false)]
        public string PortalDomain { get; set; }

        /// <summary>
        /// Number of taxes rates used per entity
        /// </summary>
        /// <value>Number of taxes rates used per entity</value>
        [DataMember(Name="enabled_tax_rates", EmitDefaultValue=false)]
        public int? EnabledTaxRates { get; set; }

        /// <summary>
        /// Toggles filling a product description based on product key
        /// </summary>
        /// <value>Toggles filling a product description based on product key</value>
        [DataMember(Name="fill_products", EmitDefaultValue=false)]
        public bool? FillProducts { get; set; }

        /// <summary>
        /// ___________
        /// </summary>
        /// <value>___________</value>
        [DataMember(Name="convert_products", EmitDefaultValue=false)]
        public bool? ConvertProducts { get; set; }

        /// <summary>
        /// Toggles updating a product description which description changes
        /// </summary>
        /// <value>Toggles updating a product description which description changes</value>
        [DataMember(Name="update_products", EmitDefaultValue=false)]
        public bool? UpdateProducts { get; set; }

        /// <summary>
        /// Toggles showing a product description which description changes
        /// </summary>
        /// <value>Toggles showing a product description which description changes</value>
        [DataMember(Name="show_product_details", EmitDefaultValue=false)]
        public bool? ShowProductDetails { get; set; }

        /// <summary>
        /// Custom fields map
        /// </summary>
        /// <value>Custom fields map</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// ______________
        /// </summary>
        /// <value>______________</value>
        [DataMember(Name="enable_product_cost", EmitDefaultValue=false)]
        public bool? EnableProductCost { get; set; }

        /// <summary>
        /// ______________
        /// </summary>
        /// <value>______________</value>
        [DataMember(Name="enable_product_quantity", EmitDefaultValue=false)]
        public bool? EnableProductQuantity { get; set; }

        /// <summary>
        /// ______________
        /// </summary>
        /// <value>______________</value>
        [DataMember(Name="default_quantity", EmitDefaultValue=false)]
        public bool? DefaultQuantity { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_taxes1", EmitDefaultValue=false)]
        public bool? CustomSurchargeTaxes1 { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_taxes2", EmitDefaultValue=false)]
        public bool? CustomSurchargeTaxes2 { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_taxes3", EmitDefaultValue=false)]
        public bool? CustomSurchargeTaxes3 { get; set; }

        /// <summary>
        /// Toggles charging taxes on custom surcharge amounts
        /// </summary>
        /// <value>Toggles charging taxes on custom surcharge amounts</value>
        [DataMember(Name="custom_surcharge_taxes4", EmitDefaultValue=false)]
        public bool? CustomSurchargeTaxes4 { get; set; }

        /// <summary>
        /// The company logo - binary
        /// </summary>
        /// <value>The company logo - binary</value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public Object Logo { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public CompanySettings Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Company {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SizeId: ").Append(SizeId).Append("\n");
            sb.Append("  IndustryId: ").Append(IndustryId).Append("\n");
            sb.Append("  SlackWebhookUrl: ").Append(SlackWebhookUrl).Append("\n");
            sb.Append("  GoogleAnalyticsKey: ").Append(GoogleAnalyticsKey).Append("\n");
            sb.Append("  PortalMode: ").Append(PortalMode).Append("\n");
            sb.Append("  Subdomain: ").Append(Subdomain).Append("\n");
            sb.Append("  PortalDomain: ").Append(PortalDomain).Append("\n");
            sb.Append("  EnabledTaxRates: ").Append(EnabledTaxRates).Append("\n");
            sb.Append("  FillProducts: ").Append(FillProducts).Append("\n");
            sb.Append("  ConvertProducts: ").Append(ConvertProducts).Append("\n");
            sb.Append("  UpdateProducts: ").Append(UpdateProducts).Append("\n");
            sb.Append("  ShowProductDetails: ").Append(ShowProductDetails).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  EnableProductCost: ").Append(EnableProductCost).Append("\n");
            sb.Append("  EnableProductQuantity: ").Append(EnableProductQuantity).Append("\n");
            sb.Append("  DefaultQuantity: ").Append(DefaultQuantity).Append("\n");
            sb.Append("  CustomSurchargeTaxes1: ").Append(CustomSurchargeTaxes1).Append("\n");
            sb.Append("  CustomSurchargeTaxes2: ").Append(CustomSurchargeTaxes2).Append("\n");
            sb.Append("  CustomSurchargeTaxes3: ").Append(CustomSurchargeTaxes3).Append("\n");
            sb.Append("  CustomSurchargeTaxes4: ").Append(CustomSurchargeTaxes4).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Company);
        }

        /// <summary>
        /// Returns true if Company instances are equal
        /// </summary>
        /// <param name="input">Instance of Company to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Company input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SizeId == input.SizeId ||
                    (this.SizeId != null &&
                    this.SizeId.Equals(input.SizeId))
                ) && 
                (
                    this.IndustryId == input.IndustryId ||
                    (this.IndustryId != null &&
                    this.IndustryId.Equals(input.IndustryId))
                ) && 
                (
                    this.SlackWebhookUrl == input.SlackWebhookUrl ||
                    (this.SlackWebhookUrl != null &&
                    this.SlackWebhookUrl.Equals(input.SlackWebhookUrl))
                ) && 
                (
                    this.GoogleAnalyticsKey == input.GoogleAnalyticsKey ||
                    (this.GoogleAnalyticsKey != null &&
                    this.GoogleAnalyticsKey.Equals(input.GoogleAnalyticsKey))
                ) && 
                (
                    this.PortalMode == input.PortalMode ||
                    (this.PortalMode != null &&
                    this.PortalMode.Equals(input.PortalMode))
                ) && 
                (
                    this.Subdomain == input.Subdomain ||
                    (this.Subdomain != null &&
                    this.Subdomain.Equals(input.Subdomain))
                ) && 
                (
                    this.PortalDomain == input.PortalDomain ||
                    (this.PortalDomain != null &&
                    this.PortalDomain.Equals(input.PortalDomain))
                ) && 
                (
                    this.EnabledTaxRates == input.EnabledTaxRates ||
                    (this.EnabledTaxRates != null &&
                    this.EnabledTaxRates.Equals(input.EnabledTaxRates))
                ) && 
                (
                    this.FillProducts == input.FillProducts ||
                    (this.FillProducts != null &&
                    this.FillProducts.Equals(input.FillProducts))
                ) && 
                (
                    this.ConvertProducts == input.ConvertProducts ||
                    (this.ConvertProducts != null &&
                    this.ConvertProducts.Equals(input.ConvertProducts))
                ) && 
                (
                    this.UpdateProducts == input.UpdateProducts ||
                    (this.UpdateProducts != null &&
                    this.UpdateProducts.Equals(input.UpdateProducts))
                ) && 
                (
                    this.ShowProductDetails == input.ShowProductDetails ||
                    (this.ShowProductDetails != null &&
                    this.ShowProductDetails.Equals(input.ShowProductDetails))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.EnableProductCost == input.EnableProductCost ||
                    (this.EnableProductCost != null &&
                    this.EnableProductCost.Equals(input.EnableProductCost))
                ) && 
                (
                    this.EnableProductQuantity == input.EnableProductQuantity ||
                    (this.EnableProductQuantity != null &&
                    this.EnableProductQuantity.Equals(input.EnableProductQuantity))
                ) && 
                (
                    this.DefaultQuantity == input.DefaultQuantity ||
                    (this.DefaultQuantity != null &&
                    this.DefaultQuantity.Equals(input.DefaultQuantity))
                ) && 
                (
                    this.CustomSurchargeTaxes1 == input.CustomSurchargeTaxes1 ||
                    (this.CustomSurchargeTaxes1 != null &&
                    this.CustomSurchargeTaxes1.Equals(input.CustomSurchargeTaxes1))
                ) && 
                (
                    this.CustomSurchargeTaxes2 == input.CustomSurchargeTaxes2 ||
                    (this.CustomSurchargeTaxes2 != null &&
                    this.CustomSurchargeTaxes2.Equals(input.CustomSurchargeTaxes2))
                ) && 
                (
                    this.CustomSurchargeTaxes3 == input.CustomSurchargeTaxes3 ||
                    (this.CustomSurchargeTaxes3 != null &&
                    this.CustomSurchargeTaxes3.Equals(input.CustomSurchargeTaxes3))
                ) && 
                (
                    this.CustomSurchargeTaxes4 == input.CustomSurchargeTaxes4 ||
                    (this.CustomSurchargeTaxes4 != null &&
                    this.CustomSurchargeTaxes4.Equals(input.CustomSurchargeTaxes4))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SizeId != null)
                    hashCode = hashCode * 59 + this.SizeId.GetHashCode();
                if (this.IndustryId != null)
                    hashCode = hashCode * 59 + this.IndustryId.GetHashCode();
                if (this.SlackWebhookUrl != null)
                    hashCode = hashCode * 59 + this.SlackWebhookUrl.GetHashCode();
                if (this.GoogleAnalyticsKey != null)
                    hashCode = hashCode * 59 + this.GoogleAnalyticsKey.GetHashCode();
                if (this.PortalMode != null)
                    hashCode = hashCode * 59 + this.PortalMode.GetHashCode();
                if (this.Subdomain != null)
                    hashCode = hashCode * 59 + this.Subdomain.GetHashCode();
                if (this.PortalDomain != null)
                    hashCode = hashCode * 59 + this.PortalDomain.GetHashCode();
                if (this.EnabledTaxRates != null)
                    hashCode = hashCode * 59 + this.EnabledTaxRates.GetHashCode();
                if (this.FillProducts != null)
                    hashCode = hashCode * 59 + this.FillProducts.GetHashCode();
                if (this.ConvertProducts != null)
                    hashCode = hashCode * 59 + this.ConvertProducts.GetHashCode();
                if (this.UpdateProducts != null)
                    hashCode = hashCode * 59 + this.UpdateProducts.GetHashCode();
                if (this.ShowProductDetails != null)
                    hashCode = hashCode * 59 + this.ShowProductDetails.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.EnableProductCost != null)
                    hashCode = hashCode * 59 + this.EnableProductCost.GetHashCode();
                if (this.EnableProductQuantity != null)
                    hashCode = hashCode * 59 + this.EnableProductQuantity.GetHashCode();
                if (this.DefaultQuantity != null)
                    hashCode = hashCode * 59 + this.DefaultQuantity.GetHashCode();
                if (this.CustomSurchargeTaxes1 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTaxes1.GetHashCode();
                if (this.CustomSurchargeTaxes2 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTaxes2.GetHashCode();
                if (this.CustomSurchargeTaxes3 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTaxes3.GetHashCode();
                if (this.CustomSurchargeTaxes4 != null)
                    hashCode = hashCode * 59 + this.CustomSurchargeTaxes4.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
