/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// CreditPaymentable
    /// </summary>
    [DataContract]
        public partial class CreditPaymentable :  IEquatable<CreditPaymentable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditPaymentable" /> class.
        /// </summary>
        /// <param name="creditId">______.</param>
        /// <param name="amount">______.</param>
        public CreditPaymentable(string creditId = default(string), string amount = default(string))
        {
            this.CreditId = creditId;
            this.Amount = amount;
        }
        
        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="credit_id", EmitDefaultValue=false)]
        public string CreditId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditPaymentable {\n");
            sb.Append("  CreditId: ").Append(CreditId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditPaymentable);
        }

        /// <summary>
        /// Returns true if CreditPaymentable instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditPaymentable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditPaymentable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreditId == input.CreditId ||
                    (this.CreditId != null &&
                    this.CreditId.Equals(input.CreditId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreditId != null)
                    hashCode = hashCode * 59 + this.CreditId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
