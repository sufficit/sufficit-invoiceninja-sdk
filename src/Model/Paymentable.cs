/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = InvoiceNinjaSDK.SwaggerDateConverter;

namespace InvoiceNinjaSDK.Model
{
    /// <summary>
    /// Paymentable
    /// </summary>
    [DataContract]
        public partial class Paymentable :  IEquatable<Paymentable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Paymentable" /> class.
        /// </summary>
        /// <param name="id">The paymentable hashed id.</param>
        /// <param name="invoiceId">The invoice hashed id.</param>
        /// <param name="creditId">The credit hashed id.</param>
        /// <param name="refunded">______.</param>
        /// <param name="amount">______.</param>
        /// <param name="updatedAt">Timestamp.</param>
        /// <param name="createdAt">Timestamp.</param>
        public Paymentable(string id = default(string), string invoiceId = default(string), string creditId = default(string), float? refunded = default(float?), float? amount = default(float?), decimal? updatedAt = default(decimal?), decimal? createdAt = default(decimal?))
        {
            this.Id = id;
            this.InvoiceId = invoiceId;
            this.CreditId = creditId;
            this.Refunded = refunded;
            this.Amount = amount;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
        }
        
        /// <summary>
        /// The paymentable hashed id
        /// </summary>
        /// <value>The paymentable hashed id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The invoice hashed id
        /// </summary>
        /// <value>The invoice hashed id</value>
        [DataMember(Name="invoice_id", EmitDefaultValue=false)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// The credit hashed id
        /// </summary>
        /// <value>The credit hashed id</value>
        [DataMember(Name="credit_id", EmitDefaultValue=false)]
        public string CreditId { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="refunded", EmitDefaultValue=false)]
        public float? Refunded { get; set; }

        /// <summary>
        /// ______
        /// </summary>
        /// <value>______</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public float? Amount { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public decimal? UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public decimal? CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Paymentable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  CreditId: ").Append(CreditId).Append("\n");
            sb.Append("  Refunded: ").Append(Refunded).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Paymentable);
        }

        /// <summary>
        /// Returns true if Paymentable instances are equal
        /// </summary>
        /// <param name="input">Instance of Paymentable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Paymentable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.CreditId == input.CreditId ||
                    (this.CreditId != null &&
                    this.CreditId.Equals(input.CreditId))
                ) && 
                (
                    this.Refunded == input.Refunded ||
                    (this.Refunded != null &&
                    this.Refunded.Equals(input.Refunded))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InvoiceId != null)
                    hashCode = hashCode * 59 + this.InvoiceId.GetHashCode();
                if (this.CreditId != null)
                    hashCode = hashCode * 59 + this.CreditId.GetHashCode();
                if (this.Refunded != null)
                    hashCode = hashCode * 59 + this.Refunded.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
