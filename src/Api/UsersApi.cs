/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InvoiceNinjaSDK;
using InvoiceNinjaSDK.Model;

namespace InvoiceNinjaSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Performs bulk actions on an array of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>User</returns>
        User BulkUsers (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> BulkUsersWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns></returns>
        void DeleteUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null);

        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null);
        /// <summary>
        /// Detach an existing user to a company
        /// </summary>
        /// <remarks>
        /// Detach an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void DetachUser (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);

        /// <summary>
        /// Detach an existing user to a company
        /// </summary>
        /// <remarks>
        /// Detach an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DetachUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);
        /// <summary>
        /// Shows an User for editting
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        User EditUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an User for editting
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> EditUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        User GetUsers (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUsersWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank User object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        User GetUsersCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank User object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUsersCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void InviteUser (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);

        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);
        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void InviteUserReconfirm (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);

        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteUserReconfirmWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);
        /// <summary>
        /// Shows an User
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        User ShowUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an User
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> ShowUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a User
        /// </summary>
        /// <remarks>
        /// Adds an User to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        User StoreUser (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a User
        /// </summary>
        /// <remarks>
        /// Adds an User to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> StoreUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an User
        /// </summary>
        /// <remarks>
        /// Handles the updating of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        User UpdateUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an User
        /// </summary>
        /// <remarks>
        /// Handles the updating of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Performs bulk actions on an array of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> BulkUsersAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> BulkUsersAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null);

        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null);
        /// <summary>
        /// Detach an existing user to a company
        /// </summary>
        /// <remarks>
        /// Detach an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DetachUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);

        /// <summary>
        /// Detach an existing user to a company
        /// </summary>
        /// <remarks>
        /// Detach an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DetachUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);
        /// <summary>
        /// Shows an User for editting
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> EditUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an User for editting
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> EditUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUsersAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUsersAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank User object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUsersCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank User object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUsersCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);

        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);
        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteUserReconfirmAsync (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);

        /// <summary>
        /// Reconfirm an existing user to a company
        /// </summary>
        /// <remarks>
        /// Reconfirm an existing user from a company
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteUserReconfirmAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null);
        /// <summary>
        /// Shows an User
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> ShowUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an User
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> ShowUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a User
        /// </summary>
        /// <remarks>
        /// Adds an User to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> StoreUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a User
        /// </summary>
        /// <remarks>
        /// Adds an User to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> StoreUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an User
        /// </summary>
        /// <remarks>
        /// Handles the updating of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an User
        /// </summary>
        /// <remarks>
        /// Handles the updating of an User by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private InvoiceNinjaSDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new InvoiceNinjaSDK.Configuration { BasePath = basePath };

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = InvoiceNinjaSDK.Configuration.Default;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(InvoiceNinjaSDK.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InvoiceNinjaSDK.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InvoiceNinjaSDK.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InvoiceNinjaSDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Performs bulk actions on an array of users 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>User</returns>
        public User BulkUsers (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             ApiResponse<User> localVarResponse = BulkUsersWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs bulk actions on an array of users 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > BulkUsersWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->BulkUsers");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->BulkUsers");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->BulkUsers");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->BulkUsers");

            var localVarPath = "/api/v1/users/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Performs bulk actions on an array of users 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> BulkUsersAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             ApiResponse<User> localVarResponse = await BulkUsersAsyncWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs bulk actions on an array of users 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed ids</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> BulkUsersAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->BulkUsers");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->BulkUsers");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->BulkUsers");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->BulkUsers");

            var localVarPath = "/api/v1/users/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Deletes a User Handles the deletion of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns></returns>
        public void DeleteUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null)
        {
             DeleteUserWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include, tokenName);
        }

        /// <summary>
        /// Deletes a User Handles the deletion of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->DeleteUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->DeleteUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->DeleteUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");

            var localVarPath = "/api/v1/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (tokenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token_name", tokenName)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a User Handles the deletion of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null)
        {
             await DeleteUserAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include, tokenName);

        }

        /// <summary>
        /// Deletes a User Handles the deletion of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <param name="tokenName">Customized name for the Users API Token (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null, string tokenName = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->DeleteUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->DeleteUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->DeleteUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");

            var localVarPath = "/api/v1/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (tokenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token_name", tokenName)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Detach an existing user to a company Detach an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void DetachUser (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
             DetachUserWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, user, include);
        }

        /// <summary>
        /// Detach an existing user to a company Detach an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DetachUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->DetachUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->DetachUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->DetachUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersApi->DetachUser");

            var localVarPath = "/api/v1/users/{user}/detach_from_company";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Detach an existing user to a company Detach an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DetachUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
             await DetachUserAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, user, include);

        }

        /// <summary>
        /// Detach an existing user to a company Detach an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DetachUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->DetachUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->DetachUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->DetachUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersApi->DetachUser");

            var localVarPath = "/api/v1/users/{user}/detach_from_company";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Shows an User for editting Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        public User EditUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<User> localVarResponse = EditUserWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an User for editting Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > EditUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->EditUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->EditUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->EditUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->EditUser");

            var localVarPath = "/api/v1/users/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Shows an User for editting Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> EditUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<User> localVarResponse = await EditUserAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an User for editting Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> EditUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->EditUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->EditUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->EditUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->EditUser");

            var localVarPath = "/api/v1/users/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Gets a list of users Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        public User GetUsers (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<User> localVarResponse = GetUsersWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of users Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUsersWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->GetUsers");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->GetUsers");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->GetUsers");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Gets a list of users Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUsersAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<User> localVarResponse = await GetUsersAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of users Lists users, search and filters allow fine grained lists to be generated.      Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUsersAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->GetUsers");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->GetUsers");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->GetUsers");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Gets a new blank User object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        public User GetUsersCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<User> localVarResponse = GetUsersCreateWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new blank User object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUsersCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->GetUsersCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->GetUsersCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->GetUsersCreate");

            var localVarPath = "/api/v1/users/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Gets a new blank User object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUsersCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<User> localVarResponse = await GetUsersCreateAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new blank User object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUsersCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->GetUsersCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->GetUsersCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->GetUsersCreate");

            var localVarPath = "/api/v1/users/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void InviteUser (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
             InviteUserWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, user, include);
        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InviteUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->InviteUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->InviteUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->InviteUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersApi->InviteUser");

            var localVarPath = "/api/v1/users/{user}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
             await InviteUserAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, user, include);

        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InviteUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->InviteUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->InviteUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->InviteUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersApi->InviteUser");

            var localVarPath = "/api/v1/users/{user}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void InviteUserReconfirm (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
             InviteUserReconfirmWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, user, include);
        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InviteUserReconfirmWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->InviteUserReconfirm");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->InviteUserReconfirm");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->InviteUserReconfirm");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersApi->InviteUserReconfirm");

            var localVarPath = "/api/v1/users/{user}/reconfirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUserReconfirm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteUserReconfirmAsync (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
             await InviteUserReconfirmAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, user, include);

        }

        /// <summary>
        /// Reconfirm an existing user to a company Reconfirm an existing user from a company
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="user">The user hashed_id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InviteUserReconfirmAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string user, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->InviteUserReconfirm");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->InviteUserReconfirm");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->InviteUserReconfirm");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersApi->InviteUserReconfirm");

            var localVarPath = "/api/v1/users/{user}/reconfirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUserReconfirm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Shows an User Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        public User ShowUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<User> localVarResponse = ShowUserWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an User Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > ShowUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->ShowUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->ShowUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->ShowUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ShowUser");

            var localVarPath = "/api/v1/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Shows an User Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> ShowUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<User> localVarResponse = await ShowUserAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an User Displays an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> ShowUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->ShowUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->ShowUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->ShowUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ShowUser");

            var localVarPath = "/api/v1/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Adds a User Adds an User to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        public User StoreUser (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<User> localVarResponse = StoreUserWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a User Adds an User to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > StoreUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->StoreUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->StoreUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->StoreUser");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Adds a User Adds an User to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> StoreUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<User> localVarResponse = await StoreUserAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a User Adds an User to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> StoreUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->StoreUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->StoreUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->StoreUser");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Updates an User Handles the updating of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>User</returns>
        public User UpdateUser (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an User Handles the updating of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UpdateUserWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->UpdateUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->UpdateUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->UpdateUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");

            var localVarPath = "/api/v1/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Updates an User Handles the updating of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<User> localVarResponse = await UpdateUserAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an User Handles the updating of an User by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The User Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling UsersApi->UpdateUser");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling UsersApi->UpdateUser");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling UsersApi->UpdateUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");

            var localVarPath = "/api/v1/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

    }
}
