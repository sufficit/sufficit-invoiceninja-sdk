/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InvoiceNinjaSDK;
using InvoiceNinjaSDK.Model;

namespace InvoiceNinjaSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Performs a custom action on an Payment
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment ActionPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);

        /// <summary>
        /// Performs a custom action on an Payment
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> ActionPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);
        /// <summary>
        /// Performs bulk actions on an array of payments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Payment</returns>
        Payment BulkPayments (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of payments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> BulkPaymentsWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a Payment
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void DeletePayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Deletes a Payment
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Shows an Payment for editting
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment EditPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an Payment for editting
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> EditPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of payments
        /// </summary>
        /// <remarks>
        /// Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment GetPayments (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of payments
        /// </summary>
        /// <remarks>
        /// Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GetPaymentsWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank Payment object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment GetPaymentsCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank Payment object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GetPaymentsCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Shows an Payment
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment ShowPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an Payment
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> ShowPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a Payment
        /// </summary>
        /// <remarks>
        /// Adds an Payment to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment StorePayment (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a Payment
        /// </summary>
        /// <remarks>
        /// Adds an Payment to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> StorePaymentWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Adds a Refund
        /// </summary>
        /// <remarks>
        /// Adds an Refund to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment StoreRefund (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a Refund
        /// </summary>
        /// <remarks>
        /// Adds an Refund to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> StoreRefundWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an Payment
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment UpdatePayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an Payment
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> UpdatePaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Uploads a document to a payment
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a payment
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        Payment UploadPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Uploads a document to a payment
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a payment
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> UploadPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Performs a custom action on an Payment
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> ActionPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);

        /// <summary>
        /// Performs a custom action on an Payment
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> ActionPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);
        /// <summary>
        /// Performs bulk actions on an array of payments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> BulkPaymentsAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of payments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> BulkPaymentsAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a Payment
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Deletes a Payment
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Shows an Payment for editting
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> EditPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an Payment for editting
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> EditPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of payments
        /// </summary>
        /// <remarks>
        /// Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GetPaymentsAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of payments
        /// </summary>
        /// <remarks>
        /// Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentsAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank Payment object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GetPaymentsCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank Payment object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentsCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Shows an Payment
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> ShowPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an Payment
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> ShowPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a Payment
        /// </summary>
        /// <remarks>
        /// Adds an Payment to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> StorePaymentAsync (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a Payment
        /// </summary>
        /// <remarks>
        /// Adds an Payment to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> StorePaymentAsyncWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Adds a Refund
        /// </summary>
        /// <remarks>
        /// Adds an Refund to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> StoreRefundAsync (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a Refund
        /// </summary>
        /// <remarks>
        /// Adds an Refund to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> StoreRefundAsyncWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an Payment
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> UpdatePaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an Payment
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Payment by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> UpdatePaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Uploads a document to a payment
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a payment
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> UploadPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Uploads a document to a payment
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a payment
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> UploadPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PaymentsApi : IPaymentsApi
    {
        private InvoiceNinjaSDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new InvoiceNinjaSDK.Configuration { BasePath = basePath };

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentsApi()
        {
            this.Configuration = InvoiceNinjaSDK.Configuration.Default;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(InvoiceNinjaSDK.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InvoiceNinjaSDK.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InvoiceNinjaSDK.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InvoiceNinjaSDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Performs a custom action on an Payment Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment ActionPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
             ApiResponse<Payment> localVarResponse = ActionPaymentWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, action, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs a custom action on an Payment Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > ActionPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling PaymentsApi->ActionPayment");

            var localVarPath = "/api/v1/payments/{id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Performs a custom action on an Payment Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> ActionPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await ActionPaymentAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, action, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs a custom action on an Payment Performs a custom action on an Payment.      The current range of actions are as follows     - clone_to_Payment     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> ActionPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->ActionPayment");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling PaymentsApi->ActionPayment");

            var localVarPath = "/api/v1/payments/{id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Performs bulk actions on an array of payments 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Payment</returns>
        public Payment BulkPayments (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             ApiResponse<Payment> localVarResponse = BulkPaymentsWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs bulk actions on an array of payments 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > BulkPaymentsWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->BulkPayments");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->BulkPayments");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->BulkPayments");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->BulkPayments");

            var localVarPath = "/api/v1/payments/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Performs bulk actions on an array of payments 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> BulkPaymentsAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             ApiResponse<Payment> localVarResponse = await BulkPaymentsAsyncWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs bulk actions on an array of payments 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> BulkPaymentsAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->BulkPayments");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->BulkPayments");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->BulkPayments");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->BulkPayments");

            var localVarPath = "/api/v1/payments/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Deletes a Payment Handles the deletion of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void DeletePayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             DeletePaymentWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
        }

        /// <summary>
        /// Deletes a Payment Handles the deletion of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->DeletePayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->DeletePayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->DeletePayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->DeletePayment");

            var localVarPath = "/api/v1/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Payment Handles the deletion of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             await DeletePaymentAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);

        }

        /// <summary>
        /// Deletes a Payment Handles the deletion of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->DeletePayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->DeletePayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->DeletePayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->DeletePayment");

            var localVarPath = "/api/v1/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Shows an Payment for editting Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment EditPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = EditPaymentWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an Payment for editting Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > EditPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->EditPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->EditPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->EditPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->EditPayment");

            var localVarPath = "/api/v1/payments/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Shows an Payment for editting Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> EditPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await EditPaymentAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an Payment for editting Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> EditPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->EditPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->EditPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->EditPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->EditPayment");

            var localVarPath = "/api/v1/payments/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Gets a list of payments Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment GetPayments (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = GetPaymentsWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of payments Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > GetPaymentsWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->GetPayments");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->GetPayments");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->GetPayments");

            var localVarPath = "/api/v1/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Gets a list of payments Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GetPaymentsAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await GetPaymentsAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of payments Lists payments, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentsAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->GetPayments");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->GetPayments");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->GetPayments");

            var localVarPath = "/api/v1/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Gets a new blank Payment object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment GetPaymentsCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = GetPaymentsCreateWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new blank Payment object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > GetPaymentsCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->GetPaymentsCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->GetPaymentsCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->GetPaymentsCreate");

            var localVarPath = "/api/v1/payments/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Gets a new blank Payment object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GetPaymentsCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await GetPaymentsCreateAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new blank Payment object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentsCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->GetPaymentsCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->GetPaymentsCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->GetPaymentsCreate");

            var localVarPath = "/api/v1/payments/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Shows an Payment Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment ShowPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = ShowPaymentWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an Payment Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > ShowPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->ShowPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->ShowPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->ShowPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->ShowPayment");

            var localVarPath = "/api/v1/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Shows an Payment Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> ShowPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await ShowPaymentAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an Payment Displays an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> ShowPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->ShowPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->ShowPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->ShowPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->ShowPayment");

            var localVarPath = "/api/v1/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Adds a Payment Adds an Payment to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment StorePayment (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = StorePaymentWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a Payment Adds an Payment to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > StorePaymentWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->StorePayment");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->StorePayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->StorePayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->StorePayment");

            var localVarPath = "/api/v1/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Adds a Payment Adds an Payment to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> StorePaymentAsync (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await StorePaymentAsyncWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a Payment Adds an Payment to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payment request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> StorePaymentAsyncWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->StorePayment");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->StorePayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->StorePayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->StorePayment");

            var localVarPath = "/api/v1/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Adds a Refund Adds an Refund to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment StoreRefund (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = StoreRefundWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a Refund Adds an Refund to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > StoreRefundWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->StoreRefund");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->StoreRefund");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->StoreRefund");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->StoreRefund");

            var localVarPath = "/api/v1/payments/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Adds a Refund Adds an Refund to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> StoreRefundAsync (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await StoreRefundAsyncWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a Refund Adds an Refund to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The refund request</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> StoreRefundAsyncWithHttpInfo (Payment body, string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->StoreRefund");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->StoreRefund");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->StoreRefund");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->StoreRefund");

            var localVarPath = "/api/v1/payments/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Updates an Payment Handles the updating of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment UpdatePayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = UpdatePaymentWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an Payment Handles the updating of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > UpdatePaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->UpdatePayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->UpdatePayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->UpdatePayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->UpdatePayment");

            var localVarPath = "/api/v1/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Updates an Payment Handles the updating of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> UpdatePaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await UpdatePaymentAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an Payment Handles the updating of an Payment by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> UpdatePaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->UpdatePayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->UpdatePayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->UpdatePayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->UpdatePayment");

            var localVarPath = "/api/v1/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Uploads a document to a payment Handles the uploading of a document to a payment
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Payment</returns>
        public Payment UploadPayment (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = UploadPaymentWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a document to a payment Handles the uploading of a document to a payment
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > UploadPaymentWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->UploadPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->UploadPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->UploadPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->UploadPayment");

            var localVarPath = "/api/v1/payments/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Uploads a document to a payment Handles the uploading of a document to a payment
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> UploadPaymentAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Payment> localVarResponse = await UploadPaymentAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a document to a payment Handles the uploading of a document to a payment
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Payment Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> UploadPaymentAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling PaymentsApi->UploadPayment");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling PaymentsApi->UploadPayment");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling PaymentsApi->UploadPayment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->UploadPayment");

            var localVarPath = "/api/v1/payments/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

    }
}
