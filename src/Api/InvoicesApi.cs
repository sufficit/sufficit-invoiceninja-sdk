/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InvoiceNinjaSDK;
using InvoiceNinjaSDK.Model;

namespace InvoiceNinjaSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IInvoicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Performs a custom action on an invoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice ActionInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);

        /// <summary>
        /// Performs a custom action on an invoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> ActionInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);
        /// <summary>
        /// Performs bulk actions on an array of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns></returns>
        void BulkInvoices (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BulkInvoicesWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a invoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void DeleteInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Deletes a invoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Download a specific invoice delivery notes
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice delivery notes
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void DeliveryNote (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Download a specific invoice delivery notes
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice delivery notes
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeliveryNoteWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void DownloadInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);

        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);
        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void DownloadRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);

        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);
        /// <summary>
        /// Shows an invoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice EditInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an invoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> EditInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of invoices
        /// </summary>
        /// <remarks>
        /// Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice GetInvoices (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of invoices
        /// </summary>
        /// <remarks>
        /// Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> GetInvoicesWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank invoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice GetInvoicesCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank invoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> GetInvoicesCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Shows an invoice
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice ShowInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an invoice
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> ShowInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a invoice
        /// </summary>
        /// <remarks>
        /// Adds an invoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice StoreInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a invoice
        /// </summary>
        /// <remarks>
        /// Adds an invoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> StoreInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an invoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice UpdateInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an invoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> UpdateInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Uploads a document to a invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        Invoice UploadInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Uploads a document to a invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> UploadInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Performs a custom action on an invoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> ActionInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);

        /// <summary>
        /// Performs a custom action on an invoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> ActionInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);
        /// <summary>
        /// Performs bulk actions on an array of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BulkInvoicesAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BulkInvoicesAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a invoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Deletes a invoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Download a specific invoice delivery notes
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice delivery notes
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeliveryNoteAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Download a specific invoice delivery notes
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice delivery notes
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeliveryNoteAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);

        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);
        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);

        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null);
        /// <summary>
        /// Shows an invoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> EditInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an invoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> EditInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of invoices
        /// </summary>
        /// <remarks>
        /// Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> GetInvoicesAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of invoices
        /// </summary>
        /// <remarks>
        /// Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoicesAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank invoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> GetInvoicesCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank invoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoicesCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Shows an invoice
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> ShowInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an invoice
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> ShowInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a invoice
        /// </summary>
        /// <remarks>
        /// Adds an invoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> StoreInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a invoice
        /// </summary>
        /// <remarks>
        /// Adds an invoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> StoreInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an invoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> UpdateInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an invoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an invoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> UpdateInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Uploads a document to a invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> UploadInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Uploads a document to a invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> UploadInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class InvoicesApi : IInvoicesApi
    {
        private InvoiceNinjaSDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicesApi(String basePath)
        {
            this.Configuration = new InvoiceNinjaSDK.Configuration { BasePath = basePath };

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public InvoicesApi()
        {
            this.Configuration = InvoiceNinjaSDK.Configuration.Default;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoicesApi(InvoiceNinjaSDK.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InvoiceNinjaSDK.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InvoiceNinjaSDK.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InvoiceNinjaSDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Performs a custom action on an invoice Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice ActionInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = ActionInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, action, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs a custom action on an invoice Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > ActionInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling InvoicesApi->ActionInvoice");

            var localVarPath = "/api/v1/invoices/{id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Performs a custom action on an invoice Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> ActionInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await ActionInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, action, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs a custom action on an invoice Performs a custom action on an invoice.      *      *        The current range of actions are as follows      *        - clone_to_invoice      *        - clone_to_quote      *        - history      *        - delivery_note      *        - mark_paid      *        - download      *        - archive      *        - delete      *        - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> ActionInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->ActionInvoice");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling InvoicesApi->ActionInvoice");

            var localVarPath = "/api/v1/invoices/{id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Performs bulk actions on an array of invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns></returns>
        public void BulkInvoices (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             BulkInvoicesWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);
        }

        /// <summary>
        /// Performs bulk actions on an array of invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BulkInvoicesWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoicesApi->BulkInvoices");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->BulkInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->BulkInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->BulkInvoices");

            var localVarPath = "/api/v1/invoices/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Performs bulk actions on an array of invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BulkInvoicesAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             await BulkInvoicesAsyncWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);

        }

        /// <summary>
        /// Performs bulk actions on an array of invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User credentials</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BulkInvoicesAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoicesApi->BulkInvoices");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->BulkInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->BulkInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->BulkInvoices");

            var localVarPath = "/api/v1/invoices/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a invoice Handles the deletion of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void DeleteInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             DeleteInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
        }

        /// <summary>
        /// Deletes a invoice Handles the deletion of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DeleteInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DeleteInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DeleteInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->DeleteInvoice");

            var localVarPath = "/api/v1/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a invoice Handles the deletion of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             await DeleteInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);

        }

        /// <summary>
        /// Deletes a invoice Handles the deletion of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DeleteInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DeleteInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DeleteInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->DeleteInvoice");

            var localVarPath = "/api/v1/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download a specific invoice delivery notes Downloads a specific invoice delivery notes
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void DeliveryNote (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             DeliveryNoteWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
        }

        /// <summary>
        /// Download a specific invoice delivery notes Downloads a specific invoice delivery notes
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeliveryNoteWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DeliveryNote");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DeliveryNote");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DeliveryNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->DeliveryNote");

            var localVarPath = "/api/v1/invoices/{id}/delivery_note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeliveryNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download a specific invoice delivery notes Downloads a specific invoice delivery notes
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeliveryNoteAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             await DeliveryNoteAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);

        }

        /// <summary>
        /// Download a specific invoice delivery notes Downloads a specific invoice delivery notes
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hahsed Id</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeliveryNoteAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DeliveryNote");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DeliveryNote");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DeliveryNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->DeliveryNote");

            var localVarPath = "/api/v1/invoices/{id}/delivery_note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeliveryNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void DownloadInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
             DownloadInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, invitationKey, include);
        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DownloadInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DownloadInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DownloadInvoice");
            // verify the required parameter 'invitationKey' is set
            if (invitationKey == null)
                throw new ApiException(400, "Missing required parameter 'invitationKey' when calling InvoicesApi->DownloadInvoice");

            var localVarPath = "/api/v1/invoice/{invitation_key}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationKey != null) localVarPathParams.Add("invitation_key", this.Configuration.ApiClient.ParameterToString(invitationKey)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
             await DownloadInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, invitationKey, include);

        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DownloadInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DownloadInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DownloadInvoice");
            // verify the required parameter 'invitationKey' is set
            if (invitationKey == null)
                throw new ApiException(400, "Missing required parameter 'invitationKey' when calling InvoicesApi->DownloadInvoice");

            var localVarPath = "/api/v1/invoice/{invitation_key}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationKey != null) localVarPathParams.Add("invitation_key", this.Configuration.ApiClient.ParameterToString(invitationKey)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void DownloadRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
             DownloadRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, invitationKey, include);
        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DownloadRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DownloadRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DownloadRecurringInvoice");
            // verify the required parameter 'invitationKey' is set
            if (invitationKey == null)
                throw new ApiException(400, "Missing required parameter 'invitationKey' when calling InvoicesApi->DownloadRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoice/{invitation_key}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationKey != null) localVarPathParams.Add("invitation_key", this.Configuration.ApiClient.ParameterToString(invitationKey)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
             await DownloadRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, invitationKey, include);

        }

        /// <summary>
        /// Download a specific invoice by invitation key Downloads a specific invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="invitationKey">The Recurring Invoice Invitation Key</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string invitationKey, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->DownloadRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->DownloadRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->DownloadRecurringInvoice");
            // verify the required parameter 'invitationKey' is set
            if (invitationKey == null)
                throw new ApiException(400, "Missing required parameter 'invitationKey' when calling InvoicesApi->DownloadRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoice/{invitation_key}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationKey != null) localVarPathParams.Add("invitation_key", this.Configuration.ApiClient.ParameterToString(invitationKey)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Shows an invoice for editting Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice EditInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = EditInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an invoice for editting Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > EditInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->EditInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->EditInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->EditInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->EditInvoice");

            var localVarPath = "/api/v1/invoices/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Shows an invoice for editting Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> EditInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await EditInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an invoice for editting Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> EditInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->EditInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->EditInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->EditInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->EditInvoice");

            var localVarPath = "/api/v1/invoices/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Gets a list of invoices Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice GetInvoices (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = GetInvoicesWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of invoices Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > GetInvoicesWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->GetInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->GetInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->GetInvoices");

            var localVarPath = "/api/v1/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Gets a list of invoices Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> GetInvoicesAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await GetInvoicesAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of invoices Lists invoices, search and filters allow fine grained lists to be generated.      *      *  Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoicesAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->GetInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->GetInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->GetInvoices");

            var localVarPath = "/api/v1/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Gets a new blank invoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice GetInvoicesCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = GetInvoicesCreateWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new blank invoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > GetInvoicesCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->GetInvoicesCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->GetInvoicesCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->GetInvoicesCreate");

            var localVarPath = "/api/v1/invoices/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoicesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Gets a new blank invoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> GetInvoicesCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await GetInvoicesCreateAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new blank invoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoicesCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->GetInvoicesCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->GetInvoicesCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->GetInvoicesCreate");

            var localVarPath = "/api/v1/invoices/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoicesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Shows an invoice Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice ShowInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = ShowInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an invoice Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > ShowInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->ShowInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->ShowInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->ShowInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->ShowInvoice");

            var localVarPath = "/api/v1/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Shows an invoice Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> ShowInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await ShowInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an invoice Displays an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> ShowInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->ShowInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->ShowInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->ShowInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->ShowInvoice");

            var localVarPath = "/api/v1/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Adds a invoice Adds an invoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice StoreInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = StoreInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a invoice Adds an invoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > StoreInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->StoreInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->StoreInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->StoreInvoice");

            var localVarPath = "/api/v1/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Adds a invoice Adds an invoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> StoreInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await StoreInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a invoice Adds an invoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> StoreInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->StoreInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->StoreInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->StoreInvoice");

            var localVarPath = "/api/v1/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Updates an invoice Handles the updating of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice UpdateInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = UpdateInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an invoice Handles the updating of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > UpdateInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UpdateInvoice");

            var localVarPath = "/api/v1/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Updates an invoice Handles the updating of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> UpdateInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await UpdateInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an invoice Handles the updating of an invoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> UpdateInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UpdateInvoice");

            var localVarPath = "/api/v1/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Uploads a document to a invoice Handles the uploading of a document to a invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice UploadInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = UploadInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a document to a invoice Handles the uploading of a document to a invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > UploadInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->UploadInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->UploadInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->UploadInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UploadInvoice");

            var localVarPath = "/api/v1/invoices/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Uploads a document to a invoice Handles the uploading of a document to a invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> UploadInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<Invoice> localVarResponse = await UploadInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a document to a invoice Handles the uploading of a document to a invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The Invoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> UploadInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling InvoicesApi->UploadInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling InvoicesApi->UploadInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling InvoicesApi->UploadInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UploadInvoice");

            var localVarPath = "/api/v1/invoices/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

    }
}
