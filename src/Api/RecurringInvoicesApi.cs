/* 
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here. 
 *
 * OpenAPI spec version: 5.1.20
 * Contact: contact@invoiceninja.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InvoiceNinjaSDK;
using InvoiceNinjaSDK.Model;

namespace InvoiceNinjaSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IRecurringInvoicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Performs a custom action on an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice ActionRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);

        /// <summary>
        /// Performs a custom action on an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> ActionRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);
        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice BulkRecurringInvoices (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> BulkRecurringInvoicesWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        void DeleteRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Deletes a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Shows an RecurringInvoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice EditRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an RecurringInvoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> EditRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of recurring_invoices
        /// </summary>
        /// <remarks>
        /// Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice GetRecurringInvoices (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of recurring_invoices
        /// </summary>
        /// <remarks>
        /// Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> GetRecurringInvoicesWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank RecurringInvoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice GetRecurringInvoicesCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank RecurringInvoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> GetRecurringInvoicesCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Shows an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice ShowRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> ShowRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Adds an RecurringInvoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice StoreRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Adds an RecurringInvoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> StoreRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice UpdateRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> UpdateRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Uploads a document to a recurring_invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a recurring_invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        RecurringInvoice UploadRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Uploads a document to a recurring_invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a recurring_invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        ApiResponse<RecurringInvoice> UploadRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Performs a custom action on an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> ActionRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);

        /// <summary>
        /// Performs a custom action on an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> ActionRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null);
        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> BulkRecurringInvoicesAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);

        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> BulkRecurringInvoicesAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null);
        /// <summary>
        /// Deletes a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Deletes a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Shows an RecurringInvoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> EditRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an RecurringInvoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> EditRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Gets a list of recurring_invoices
        /// </summary>
        /// <remarks>
        /// Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> GetRecurringInvoicesAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a list of recurring_invoices
        /// </summary>
        /// <remarks>
        /// Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> GetRecurringInvoicesAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Gets a new blank RecurringInvoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> GetRecurringInvoicesCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Gets a new blank RecurringInvoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> GetRecurringInvoicesCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Shows an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> ShowRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Shows an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> ShowRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Adds a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Adds an RecurringInvoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> StoreRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);

        /// <summary>
        /// Adds a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Adds an RecurringInvoice to the system
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> StoreRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null);
        /// <summary>
        /// Updates an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> UpdateRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Updates an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an RecurringInvoice by id
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> UpdateRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        /// <summary>
        /// Uploads a document to a recurring_invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a recurring_invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        System.Threading.Tasks.Task<RecurringInvoice> UploadRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);

        /// <summary>
        /// Uploads a document to a recurring_invoice
        /// </summary>
        /// <remarks>
        /// Handles the uploading of a document to a recurring_invoice
        /// </remarks>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> UploadRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class RecurringInvoicesApi : IRecurringInvoicesApi
    {
        private InvoiceNinjaSDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringInvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurringInvoicesApi(String basePath)
        {
            this.Configuration = new InvoiceNinjaSDK.Configuration { BasePath = basePath };

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringInvoicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public RecurringInvoicesApi()
        {
            this.Configuration = InvoiceNinjaSDK.Configuration.Default;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringInvoicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecurringInvoicesApi(InvoiceNinjaSDK.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InvoiceNinjaSDK.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InvoiceNinjaSDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InvoiceNinjaSDK.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InvoiceNinjaSDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Performs a custom action on an RecurringInvoice Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice ActionRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = ActionRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, action, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs a custom action on an RecurringInvoice Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > ActionRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling RecurringInvoicesApi->ActionRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Performs a custom action on an RecurringInvoice Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> ActionRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await ActionRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, action, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs a custom action on an RecurringInvoice Performs a custom action on an RecurringInvoice.      The current range of actions are as follows     - clone_to_RecurringInvoice     - clone_to_quote     - history     - delivery_note     - mark_paid     - download     - archive     - delete     - email
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="action">The action string to be performed</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> ActionRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string action, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->ActionRecurringInvoice");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling RecurringInvoicesApi->ActionRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice BulkRecurringInvoices (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = BulkRecurringInvoicesWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > BulkRecurringInvoicesWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecurringInvoicesApi->BulkRecurringInvoices");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->BulkRecurringInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->BulkRecurringInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->BulkRecurringInvoices");

            var localVarPath = "/api/v1/recurring_invoices/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkRecurringInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> BulkRecurringInvoicesAsync (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await BulkRecurringInvoicesAsyncWithHttpInfo(body, xApiSecret, xApiToken, xRequestedWith, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices 
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hashed IDs</param>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="index">Replaces the default response index from data to a user specific string (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> BulkRecurringInvoicesAsyncWithHttpInfo (List<int?> body, string xApiSecret, string xApiToken, string xRequestedWith, string index = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecurringInvoicesApi->BulkRecurringInvoices");
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->BulkRecurringInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->BulkRecurringInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->BulkRecurringInvoices");

            var localVarPath = "/api/v1/recurring_invoices/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkRecurringInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Deletes a RecurringInvoice Handles the deletion of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns></returns>
        public void DeleteRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             DeleteRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
        }

        /// <summary>
        /// Deletes a RecurringInvoice Handles the deletion of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->DeleteRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->DeleteRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->DeleteRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->DeleteRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a RecurringInvoice Handles the deletion of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             await DeleteRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);

        }

        /// <summary>
        /// Deletes a RecurringInvoice Handles the deletion of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->DeleteRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->DeleteRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->DeleteRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->DeleteRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Shows an RecurringInvoice for editting Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice EditRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = EditRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an RecurringInvoice for editting Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > EditRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->EditRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->EditRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->EditRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->EditRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Shows an RecurringInvoice for editting Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> EditRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await EditRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an RecurringInvoice for editting Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> EditRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->EditRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->EditRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->EditRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->EditRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Gets a list of recurring_invoices Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice GetRecurringInvoices (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = GetRecurringInvoicesWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of recurring_invoices Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > GetRecurringInvoicesWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->GetRecurringInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->GetRecurringInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->GetRecurringInvoices");

            var localVarPath = "/api/v1/recurring_invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Gets a list of recurring_invoices Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> GetRecurringInvoicesAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await GetRecurringInvoicesAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of recurring_invoices Lists recurring_invoices, search and filters allow fine grained lists to be generated.          Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> GetRecurringInvoicesAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->GetRecurringInvoices");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->GetRecurringInvoices");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->GetRecurringInvoices");

            var localVarPath = "/api/v1/recurring_invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Gets a new blank RecurringInvoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice GetRecurringInvoicesCreate (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = GetRecurringInvoicesCreateWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new blank RecurringInvoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > GetRecurringInvoicesCreateWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->GetRecurringInvoicesCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->GetRecurringInvoicesCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->GetRecurringInvoicesCreate");

            var localVarPath = "/api/v1/recurring_invoices/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoicesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Gets a new blank RecurringInvoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> GetRecurringInvoicesCreateAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await GetRecurringInvoicesCreateAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new blank RecurringInvoice object Returns a blank object with default values
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> GetRecurringInvoicesCreateAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->GetRecurringInvoicesCreate");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->GetRecurringInvoicesCreate");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->GetRecurringInvoicesCreate");

            var localVarPath = "/api/v1/recurring_invoices/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoicesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Shows an RecurringInvoice Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice ShowRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = ShowRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shows an RecurringInvoice Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > ShowRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->ShowRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->ShowRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->ShowRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->ShowRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Shows an RecurringInvoice Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> ShowRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await ShowRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shows an RecurringInvoice Displays an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> ShowRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->ShowRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->ShowRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->ShowRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->ShowRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Adds a RecurringInvoice Adds an RecurringInvoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice StoreRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = StoreRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a RecurringInvoice Adds an RecurringInvoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > StoreRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->StoreRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->StoreRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->StoreRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Adds a RecurringInvoice Adds an RecurringInvoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> StoreRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await StoreRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a RecurringInvoice Adds an RecurringInvoice to the system
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> StoreRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->StoreRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->StoreRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->StoreRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoreRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Updates an RecurringInvoice Handles the updating of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice UpdateRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = UpdateRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an RecurringInvoice Handles the updating of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > UpdateRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->UpdateRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->UpdateRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->UpdateRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->UpdateRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Updates an RecurringInvoice Handles the updating of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> UpdateRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await UpdateRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an RecurringInvoice Handles the updating of an RecurringInvoice by id
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> UpdateRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->UpdateRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->UpdateRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->UpdateRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->UpdateRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Uploads a document to a recurring_invoice Handles the uploading of a document to a recurring_invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>RecurringInvoice</returns>
        public RecurringInvoice UploadRecurringInvoice (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = UploadRecurringInvoiceWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a document to a recurring_invoice Handles the uploading of a document to a recurring_invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>ApiResponse of RecurringInvoice</returns>
        public ApiResponse< RecurringInvoice > UploadRecurringInvoiceWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->UploadRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->UploadRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->UploadRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->UploadRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

        /// <summary>
        /// Uploads a document to a recurring_invoice Handles the uploading of a document to a recurring_invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of RecurringInvoice</returns>
        public async System.Threading.Tasks.Task<RecurringInvoice> UploadRecurringInvoiceAsync (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
             ApiResponse<RecurringInvoice> localVarResponse = await UploadRecurringInvoiceAsyncWithHttpInfo(xApiSecret, xApiToken, xRequestedWith, id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a document to a recurring_invoice Handles the uploading of a document to a recurring_invoice
        /// </summary>
        /// <exception cref="InvoiceNinjaSDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiSecret">The API secret as defined by the .env variable API_SECRET</param>
        /// <param name="xApiToken">The API token to be used for authentication</param>
        /// <param name="xRequestedWith">Used to send the XMLHttpRequest header</param>
        /// <param name="id">The RecurringInvoice Hashed ID</param>
        /// <param name="include">Includes child relationships in the response, format is comma separated (optional)</param>
        /// <returns>Task of ApiResponse (RecurringInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringInvoice>> UploadRecurringInvoiceAsyncWithHttpInfo (string xApiSecret, string xApiToken, string xRequestedWith, string id, string include = null)
        {
            // verify the required parameter 'xApiSecret' is set
            if (xApiSecret == null)
                throw new ApiException(400, "Missing required parameter 'xApiSecret' when calling RecurringInvoicesApi->UploadRecurringInvoice");
            // verify the required parameter 'xApiToken' is set
            if (xApiToken == null)
                throw new ApiException(400, "Missing required parameter 'xApiToken' when calling RecurringInvoicesApi->UploadRecurringInvoice");
            // verify the required parameter 'xRequestedWith' is set
            if (xRequestedWith == null)
                throw new ApiException(400, "Missing required parameter 'xRequestedWith' when calling RecurringInvoicesApi->UploadRecurringInvoice");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurringInvoicesApi->UploadRecurringInvoice");

            var localVarPath = "/api/v1/recurring_invoices/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (xApiSecret != null) localVarHeaderParams.Add("X-Api-Secret", this.Configuration.ApiClient.ParameterToString(xApiSecret)); // header parameter
            if (xApiToken != null) localVarHeaderParams.Add("X-Api-Token", this.Configuration.ApiClient.ParameterToString(xApiToken)); // header parameter
            if (xRequestedWith != null) localVarHeaderParams.Add("X-Requested-With", this.Configuration.ApiClient.ParameterToString(xRequestedWith)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringInvoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringInvoice)));
        }

    }
}
